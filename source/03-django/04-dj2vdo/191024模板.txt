模板变量的显示
？
{{ 变量名 }}
说明：变量的来源，来自视图的传递



高级模板变量取值与方法的调用
模板变量为列表，字典时，如何取成员
模板变量为对象时，如何调方法
？
取值规则：
通过点来取值，例如：
字典.键， 列表.索引， 对象.属性取值
调方法规则：
模板变量.方法名  
注意，方法名后不用加括号
例如：
模板变量 stu_list 是一个列表，取列表的2号位
{{ stu_list.2 }}
例如：
模板变量 user 是一个对象，取它的name属性值
{{ user.name }}





if标签基本用法
if...else...二路分支的格式
？
格式：
{% if 条件 %}
成立时显示
{% else %}
不成立时显示
{% endif %}
关于条件：
可以是比较大小，判断等于，成员运算，等等





for遍历基本使用
？
格式：
{% for 临时变量 in 容器 %}
临时变量
{% endfor %}
注意：
for中无continue与break
扩展：
forloop.counter	当前循环的索引值,从1开始
forloop.counter0	当前循环的索引值,从0开始
forloop.revcounter	当前循环的倒序索引值(以1结束)
forloop.revcounter0	当前循环的倒序索引值(以0结束)
forloop.first	当前循环是不是第一次循环(返回的是一个布尔值)
forloop.last	当前循环是不是最后一次循环(返回的是一个布尔值)
forloop.parentloop	本层循环的外层循环






for遍历，逆序遍历
？
格式：
{% for 临时变量 in 容器 reversed %}
临时变量
{% endfor %}






字典遍历，同时得到键与值
？
例子：
{% for key, val in persion.items %}
key--val
{% endfor %}









for循环中的变量，显示序号-顺序显示
？
forloop.counter
》
例子格式：
{% for 变量 in 容器 %}
序号：{{ forloop.counter }}
变量
{% endfor %}
》
计数从0开始，使用
forloop.counter0

 








for循环中的变量，显示序号-反向显示
？
forloop.revcounter
。
例子格式：
{% for 变量 in 容器 %}
序号：{{ forloop.revcounter }}
变量
{% endfor %}
》
计数以0结束
revcounter0





开始行与结束行的判断
？
》判断是否是开始行
forloop.first
》判断是否是结束行
forloop.last
》例子
{% for book in books %}
{% if forloop.first %}
代码一
{% elif forloop.last %}
代码二
｛% endif %}
{% endfor %}
》说明
一般会与if判断一起使用







遍历容器无数据时的显示
？
格式：
｛% for 临时变量 in 容器 %}
 	临时变量
｛% empty %}
无数据
｛% endfor %｝








常用的数据取别名
？
格式一：
{% with 别名=数据 %}
{{ 别名 }}
{% endwith %}
格式二：
{% with 数据 as 别名 %}
{{ 别名 }}
{% endwith %}
例子：
{% with zs = persons.0 %}
<p> {{ zs }} </p>
{% endwith %}

{% with persons.0 as zs %}
<p> {{ zs }} </p>
{% endwith %}





模板中的反向解析，url基本用法
？
用法，两种情况：
{% url '别名' %}
{% url '命名空间:别名' %}
例子：
路由文件中
path('book/detail/', views.book_detail, name='detail')
在模板中可以通过
{% url 'detail' %} 
拿到值
book/detail
在视图函数中可以通过
reverse('detail') 
拿到值
book/detail



模板反向解析-带关键词参数的情况
？
格式：
{% url '别名' 参数名1=值1 参数名n=值n %}
例子：
{% url 'detail' book_id=1 %}
说明：
path('book/detail/<book_id>/', views.book_detail, name='detail')
别名detail对应的路径需要一个参数
所以在反向解析时要传递过去
模板中反解 {% url 'detail' book_id=1 %}
会得到这样的结果  'book/detail/1/'
视图中反解 reverse("detail", kwargs = {"book_id":1})
会得到这样的结果  'book/detail/1/'




让我们的模板语句不生效
？
用法：
{% verbatim %}
{{ 变量 }}
{% endverbatim %}
效果：
被verbatim包裹的模板语句不会被解释
是什么还是什么
翻译：
verbatim
英 [vɜːˈbeɪtɪm]   美 [vɜːrˈbeɪtɪm]  
adj./adv.
一字不差的(地);逐字的(地)




去除html标签中的空白字符
？
格式：
{% spaceless %}
html代码
{% endspaceless %}
效果：
会把html代码中的空白，换行等符号去掉，最后形成一行
单词解释：
space，空格
less，减少





模板中的html字符串，让它渲染生效
？
格式：
｛% autoescape off %}
	{{ html模板变量 }}
｛% endautoescape %｝
效果：
被autoescape包裹的模板变量如果是html代码，会被渲染生效
默认情况django为了保护安全，不会让html或js代码渲染生效
单词：
auto，自动
escape，释放




定义一个父模板
？
原则：
通用的内容写在父模板中
不确定的，可变的内容
留一个块，让子页面填入
留块的方式：
{% block 块名称 %}
{% endblock %}
例子：
{% block title %}
{% endblock %}


子页面继承父模板
往父模板的块中塞入数据
？
继承命令：
{% extends 父模板名称 %}
往块中塞入数据：
{% block 块名称 %} 塞入的内容 {% endblock 块名称 %}
例子：
{% extends 'base.html' %}
{% block title %} myweb {% endblock %}
注意：
继承了父模板后，只能往块里塞入内容
块外面的内容，不会被显示出来




导入一个页面的组件
？
格式：
{% include 模板页面 %}
例子：
{% include "temp/in_head.html" %}
my
说明：
当前页中的模板变量，在 include 的页面中
也可以正常使用
比如当前页中有 {{ username }} 变量， 被include 的页面，也可以使用



当前模板传参数给 include 的页面
？
格式：
{% include 被包含页面 with 变量名=值 %}
例子：
{% include 'header.html' with username='zhiliao' %}

