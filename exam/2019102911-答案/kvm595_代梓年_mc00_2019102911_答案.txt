
第[1]题_01-数据库__mongodb
04-聚合.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：按照年龄进行升序
> db.one.aggregate({$sort:{age:1}})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>
例子：按照主键降序显示
> db.one.aggregate({$sort:{_id:-1}})
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
>



第[2]题_01-数据库__mongodb
03-查询.txt
...
分页相关知识
1，限定显示几条
2，跳过几条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
limit(n)，显示n条
skip(m)，跳过m条
一般limit与skip同时使用，实现分页效果
例子：
每一页显示两个数据
第一页
db.集合名.find().skip(0).limit(2)
第二页
db.集合名.find().skip(2).limit(2)
第三页
db.集合名.find().skip(4).limit(2)
第四页
db.集合名.find().skip(6).limit(2)
（当前页码-1）*每页显示几个数据
第n页
db.集合名.find().skip((n-1)*2)



第[3]题_01-数据库__mongodb
04-聚合.txt
...
匹配数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：查到年龄大于20的数据
> db.one.aggregate({$match:{age:{$gt:20}}})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>    



第[4]题_01-数据库__redis
09-hash数据类型.txt
...
获取一共有多少个键值对
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hlen 键
例子：获取zs一共有多少个字段
hlen zs



第[5]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
避免转义给字符串加哪个字母表示原始字符串
如何避免正则表达式中的内容被python解释器转义
在python写正则表达式要注意什么
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
注意使用r包裹一下
r , 表示需要原始字符串，不转义特殊字符
例如：
re_path(r"book/(\d+)/", bookview)



第[6]题_01-数据库__mongodb
04-聚合.txt
...
分页
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
$limit：隠定显示条目数
$skip：跳过条目数
例子：限定只显示两条数据
> db.one.aggregate({$limit:2})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
例子：跳过一条数据
> db.one.aggregate({$skip:1})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }



第[7]题_01-数据库__mongodb
03-查询.txt
...
统计查询结果的数量
两种方式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
方式一
db.集合名称.find(条件).count()
方式二
db.集合名称.count(条件)
例子：
查询年龄小于60的数据条目数
db.colc.find({age:{$lt:60}}).count()
db.colc.count({age:{$lt:60}})



第[8]题_03-django__04-dj2vdo
191024模板.txt
...
for循环中的变量，显示序号-顺序显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
forloop.counter
》
例子格式：
{% for 变量 in 容器 %}
序号：{{ forloop.counter }}
变量
{% endfor %}
》
计数从0开始，使用
forloop.counter0



第[9]题_01-数据库__mongodb
03-查询.txt
...
查询所有
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find()



第[10]题_01-数据库__mongodb
04-聚合.txt
...
分组
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.aggregate({_id:"$字段名"})
例子：按照classname的值来进行分组
> db.colc.aggregate({$group:{_id:'$classname'}})
{ "_id" : "java" }
{ "_id" : "php" }
{ "_id" : "python02" }
{ "_id" : "python" }
{ "_id" : null }
>
例子：按照classname的值来进行分组并统计人数
> db.colc.aggregate({$group:{_id:'$classname',num:{$sum:1}}})
{ "_id" : "java", "num" : 1 }
{ "_id" : "php", "num" : 1 }
{ "_id" : "python02", "num" : 1 }
{ "_id" : "python", "num" : 1 }
{ "_id" : null, "num" : 2 }
>
例子：分组统计小组人数，统计年龄平均值
> db.one.aggregate({$group:{_id:"$class",count:{$sum:1},pjnl:{$avg:"$age"}}})
{ "_id" : "php", "count" : 1, "pjnl" : 86 }
{ "_id" : "python", "count" : 2, "pjnl" : 28 }
例子：分组并得到最小值
> db.one.aggregate({$group:{_id:'$gender', minage:{$avg:'$age'}}})
{ "_id" : 1, "minage" : 52 }
{ "_id" : 0, "minage" : 38 }
>   



第[11]题_01-数据库__mongodb
04-聚合.txt
...
显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：不显示_id字段，只显示name字段
> db.one.aggregate({$project:{_id:0, name:1}})
{ "name" : "张三" }
{ "name" : "李四" }
{ "name" : "赵强" }
>  



第[12]题_01-数据库__mongodb
03-查询.txt
...
比较运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号有：
等于，年龄等于18  ｛age:18｝
小于，$lt， less than  比如，年龄小于18 {age:{$lt:18}}
大于，$gt,  greater than
小于等于，$lte  less than equal
大于等于，$gte
不等于， $ne   
例子：
db.colc.find({age:{$gt:19}})



第[13]题_03-django__04-dj2vdo
191024模板.txt
...
遍历容器无数据时的显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
｛% for 临时变量 in 容器 %}
 	临时变量
｛% empty %}
无数据
｛% endfor %｝



第[14]题_02-爬虫__解析库
01-xpath解析.txt
...
获取标签内容为：下一页> 的a标签，取它的href值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//a[text()="下一页>"]/@href



第[15]题_01-数据库__mongodb
03-查询.txt
...
去重
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.distinct(去重的字段)
例子：
查询所有的班级名称
db.colc.distinct("classname")
找出年龄大于17岁的，班级名称
db.colc.distinct("classname", {age:{$gt:17}})


第[16]题_01-数据库__mongodb
03-查询.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
以某某键进行升序排序
查询结果.sort(｛键：1｝)
以某某键进行降序排序
查询结果.sort(｛键：-1｝)
例子：
查询所有的数据，以age升序排序
db.colc.find().sort({age:1})
查询所有的数据，以age降序排序
db.colc.find().sort({age:-1})



第[17]题_01-数据库__mongodb
03-查询.txt
...
投影
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
功能：显示期望的字段
用法：
find(条件字典，投影字典)
投影字典的说明：
希望显示的字段，设置为1
如果不希望显示_id，设置它为0
例子：
查询结果中，只显示classname字段的值
db.getCollection('colc').find({},{classname:1})
db.colc.find({},{classname:1})
例子：
查询结果中，只显示classname字段的值，不显示_id的内容
db.getCollection('colc').find({},{classname:1, _id:0})
例子：
查找年龄在79，16岁的数据，只显示name，age
db.colc.find({age:{$in:[79,16]}},{name:1, age:1, _id:0})



第[18]题_01-数据库__mongodb
03-查询.txt
...
自定义查询，使用js语句来查
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
find({
	$where:function(){
		return this.age>19
	}
})
例子：
查找班级名称为python02的
db.colc.find({
	$where:function(){
		return this.classname == "python02"
	}
})
查找年龄小于19岁的
db.colc.find({
	$where:function(){
		return this.age < 19 
	}
})
关键点：
查询条件字典中以
$where 为键
值是一个js的匿名函数
只需要函数return 一个布尔值即可
如果布尔的结果为true 那么该行数据会被显示
通常在匿函中的this代表了当前数据行对象



第[19]题_01-数据库__mongodb
03-查询.txt
...
正则查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
find(｛键：/正则表达式/｝)
find(｛键：$regex:正则式str｝)
例子：
查询sku以abc开头的数据
db.products.find({sku:/^abc/})
例子：查询姓名以z开头的
db.colc.find({name:/^z/})



第[20]题_01-数据库__mongodb
03-查询.txt
...
逻辑运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
与，｛键1：值1， 键2：值2｝ 
或， ｛$or：[{},{}]｝
例子：
找年龄为19岁或者班级为java班的数据
db.colc.find({$or:[{age:19},{classname:"java"}]})
找年龄大于16岁或者班级为java班的数据
db.colc.find({$or:[{age:{$gt:16}},{classname:"java"}]})



第[21]题_01-数据库__mongodb
03-查询.txt
...
范围运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
在， $in
不在， $nin
例子：查询年龄在 16 19 22 岁的
db.colc.find({age:{$in:[16,19,22]}})



第[22]题_01-数据库__mongodb
03-查询.txt
...
查询，只拿一个
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.findOne(条件)



第[23]题_01-数据库__mongodb
03-查询.txt
...
一个条件的查找
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find(条件)



第[24]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[25]题_01-数据库__mongodb
02-数据行的操作.txt
...
修改数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.update(查找条件，修改内容，[{multi:true}])
情况一：查到数据，完全修改
例子：这种效果会把查到的结果完全的替代为修改的内容
查找姓名为zs的数据行，把整个数据修改年龄为20
> db.colc.update({name:"zs"},{age:20})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>   
情况二：查到数据，保留修改（只修改指定的字段）
例子，查找班级为python的数据，把年级改为2
> db.colc.update({classname:"python"},{$set:{grade:2}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
格式：
要修改的内容
{$set:{要修改的键：要修改的值}}



第[26]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
如果存在，修改
如果不存在，新增
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.colc.save({_id:100,"name":"ww"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>  



第[27]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.insert(字典)
例子：
> db.cola.insert({"name":"zs", "age":18})
WriteResult({ "nInserted" : 1 })
注意：
关于集合名称，如果操作的是一个不存在的集合
mongo会自动创建



第[28]题_01-数据库__mongodb
01-增删改查.txt
...
删除集合
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.tbtwo.drop()
true



第[29]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前数据库中的全部集合（全部数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> show collections
spider
stu
tbtwo
>



第[30]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[31]题_01-数据库__mongodb
01-增删改查.txt
...
使用数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
use 数据库名称
例子：
use one
> use one
switched to db one



第[32]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
10、python内建数据类型有哪些
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
整型--int 布尔型--bool 字符串--str 列表--list 元组--tuple 字典--dict



第[33]题_04-版本控制__01-git
01-入门.txt
...
工作区的内容恢复为修改前的内容
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
git checkout -- 文件名
例子：
。让所有的内容变为修改前
$ git checkout -- .
。让a.py变为修改前
$ git checkout -- a.py
图例：
https://img-blog.csdnimg.cn/20191015150857674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lmdWJpbmc=,size_16,color_FFFFFF,t_70



第[34]题_03-django__04-dj2vdo
1920211530综合.txt
...
命令创建django项目
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
django-admin startproject 项目名称
例子：
diango-admin startproject first_project
效果：
会在当前目录下创建一个目录，名称是项目名



第[35]题_01-数据库__redis
09-hash数据类型.txt
...
哈希的数据结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
redis数据库是键值形式的
比如0号数据库有一个name键存的字符串，有一个lis键存的列表，结构如下：
｛"name":"zs", "lis":[1,2,3]｝
如果该库中有一个键名为ha的数据是哈希类型，它在redis中的形态为：
｛"name":"zs", "lis":[1,2,3], "ha":{"f1":"v1","f2":"v2"}｝
博客：
https://blog.csdn.net/ifubing/article/details/101427123



第[36]题_01-数据库__redis
06-list数据类型.txt
...
往students键中插入成员-左侧插入
zs1
ls2
wu3
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lpush students zs1 ls2 wu3



第[37]题_02-爬虫__解析库
02-python操作xpath.txt
...
xpath的使用套招
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，实例化生成一个element对象
from lxml import etree
obj = etree.HTML(字符串html内容)
二，对象.xpath（xpath表达式)
res = obj.xpath(表达式)
# res是一个列表，如果列表成员仍然是element对象，他们仍可以使用xpath方法


第[38]题_04-版本控制__01-git
01-入门.txt
...
查看分支
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
$ git branch



第[39]题_04-版本控制__01-git
01-入门.txt
...
删除文件的操作
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1，本地删除
rm -rf 目标
2，提交到缓存区
git add 目标
3，提交到版本
git commit -m '版本说明'



第[40]题_03-django__03-配置
01-基本配置.txt
...
模板页中如何使用静态文件
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，导入静态配置
{% load staticfiles %}
二，拼静态文件的路径
例如在static目录下有image目录，目录下有a.jpg
这样子拼路径
{% static 'image/a.jpg'}



第[41]题_03-django__03-配置
01-基本配置.txt
...
静态目录的配置
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》一，新建一个static目录
》二，配置这个目录 
在settings.py中 
STATICFILES_DIR = [os.path.join(BASE_DIR, 'static')]  # 静态目录的高以置



第[42]题_02-爬虫__requests爬虫
03-经验小结.txt
...
如何获取下一页的URL地址
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，寻找URL规律，根据规律来拼下一页
二，通过"下一页"链接url来找



第[43]题_02-爬虫__解析库
02-python操作xpath.txt
...
利用Element对象的xpath方法取值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
返回值 = Element对象.xpath(字符串xpath选择语句)
注意：
返回值是列表类型
如果返回值是一个节点
那么该节点，仍然可以继续使用xpath方法



第[44]题_02-爬虫__解析库
02-python操作xpath.txt
...
把一个html字符串转换为Element对象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
Element对象 = etree.HTML(html字符串)
备注，Element对象具有xpath方法



第[45]题_02-爬虫__解析库
01-xpath解析.txt
...
获取节点的属性
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
节点/@属性名



第[46]题_02-爬虫__解析库
01-xpath解析.txt
...
获取pc标签下notbook标签的所有属性值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//pc/notbook/@*



第[47]题_02-爬虫__解析库
01-xpath解析.txt
...
获取位置不等于2的节点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//mon[position()!=2]



第[48]题_02-爬虫__解析库
01-xpath解析.txt
...
获取位置大于1的所有节点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//mon[position()>1]



第[49]题_02-爬虫__解析库
01-xpath解析.txt
...
获取第二个节点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//mon[2]
//mon[position()=2]



第[50]题_02-爬虫__解析库
01-xpath解析.txt
...
获取倒数第二个节点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
//mon[last()-1]



第[51]题_02-爬虫__解析库
01-xpath解析.txt
...
获取最后一个节点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
标签[last()]
例子：
//mon[last()]



第[52]题_02-爬虫__解析库
01-xpath解析.txt
...
选取meta标签中的第一个,拿charset属性的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//meta[1]/@charset



第[53]题_02-爬虫__解析库
01-xpath解析.txt
...
基本节点的选取
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
nodename	选取此节点的所有子节点。
/	默认情况是从根节点选取。如果当前是其它节点，以选中节点往下。
//	从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。
.	选取当前节点。
..	选取当前节点的父节点。
@	选取属性。



第[54]题_02-爬虫__requests爬虫
01-发起请求.txt
...
访问用户中心的办法
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，请求头中带上cookies数据
request.get(网址，headers=字典)
备注，字典中存一个cookie的键值对
键是：Cookie
值就是类似于这样的字符串：uuid_tt_dd=10_28743412270-1569723942844-420746; dc_session_id=10_1569723942844.879679; 
二，get方法带上cookie参数,值是一个字典
格式：
response = request.get(url, headers=请求头字典, cookies=cookie字典)
字典的键是：uuid_tt_dd
值是：10_28743412270-1569723942844-420746
字典的完整形态类以于
{
'uuid_tt_dd'='10_28743412270-1569723942844-420746',
'dc_session_id'='10_1569723942844.879679'
}
三，使用session类
1，实例化一个对session类对象
2，让该对象去登陆网站，登陆成功对象便得到了cookie数据
3，让该对象去访问用户中心URL，访问时会带上cookie。所以可以得到正确的响应。
例子：
s = requests.session()
s.post(登陆url, params=参数字典)
res = s.get(用户中心url)



第[55]题_04-版本控制__01-git
01-入门.txt
...
版本回退
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，按照版本号回退
格式：
git reset --hard 版本号
例子：
$ git reset --hard d3064f0
二，按照数量回退
方式1：通过^
例子：回退到前两个版本
git reset --hard HEAD^^
方式2：通过~
例子：回退到前50个版本
git reset --hard HEAD~50



第[56]题_04-版本控制__01-git
01-入门.txt
...
查看日志
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
git log



第[57]题_04-版本控制__01-git
01-入门.txt
...
暂存区内容添加到版本库中
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
git commit -m '版本说明'



第[58]题_04-版本控制__01-git
01-入门.txt
...
仓库内容添加到暂存区
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》添加指定的文件
git add 文件名
》添加全部文件
git add .



第[59]题_04-版本控制__01-git
01-入门.txt
...
初始化设置当前目录为仓库目录
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
git init



第[60]题_03-django__02-模板
01-过滤器.txt
...
设置默认值的过滤器
当模板变量没有值时给默认值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
{{ errmsg|default:'无' }}



第[61]题_03-django__02-模板
01-过滤器.txt
...
求长度的过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
单词：length
例如：
{{ title|length }}



第[62]题_03-django__02-模板
01-过滤器.txt
...
改变日期显示格式的过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
单词：date
例如：
{{ book.bpub_data|date:'Y年-m月-d日' }}



第[63]题_03-django__02-模板
01-过滤器.txt
...
过滤器的使用格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
模板变量|过滤器：参数
例如：
{{ book.bpub_data|date:'Y年-m月-d日' }}



第[64]题_01-数据库__mysql
01-相关操作.txt
...
远程连接数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
mysql -h ip地址 -p 端口号 -u用户名 -p
输入密码
例如：IP为192.168.206.1，端口为3306，用户名为root，密码为root
mysql -h 192.168.206.1 -p 3306 -uroot -p
请输入密码：root



第[65]题_01-数据库__redis
08-zset数据类型.txt
...
删除z1键中权值在4到10范围的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zremrangebyscore z1 4 10



第[66]题_01-数据库__redis
08-zset数据类型.txt
...
删除z1键里的两个成员two,three
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrem z1 two three



第[67]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键中数据three的权值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zscore z1 three



第[68]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键里权值在1到5范围的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrangebyscore z1 1 5



第[69]题_01-数据库__redis
06-list数据类型.txt
...
lis键中查找a
找到后从左向右删掉2个
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrem lis 2 a



第[70]题_01-数据库__redis
06-list数据类型.txt
...
lis键的0号数据改为pp
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lset lis 0 pp



