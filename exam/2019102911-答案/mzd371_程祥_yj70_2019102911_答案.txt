
第[1]题_01-数据库__mongodb
04-聚合.txt
...
分页
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
$limit：隠定显示条目数
$skip：跳过条目数
例子：限定只显示两条数据
> db.one.aggregate({$limit:2})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
例子：跳过一条数据
> db.one.aggregate({$skip:1})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }



第[2]题_01-数据库__mongodb
04-聚合.txt
...
匹配数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：查到年龄大于20的数据
> db.one.aggregate({$match:{age:{$gt:20}}})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>    



第[3]题_03-django__04-dj2vdo
191024模板.txt
...
for循环中的变量，显示序号-顺序显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
forloop.counter
》
例子格式：
{% for 变量 in 容器 %}
序号：{{ forloop.counter }}
变量
{% endfor %}
》
计数从0开始，使用
forloop.counter0



第[4]题_01-数据库__redis
09-hash数据类型.txt
...
获取一共有多少个键值对
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hlen 键
例子：获取zs一共有多少个字段
hlen zs



第[5]题_01-数据库__mongodb
04-聚合.txt
...
显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：不显示_id字段，只显示name字段
> db.one.aggregate({$project:{_id:0, name:1}})
{ "name" : "张三" }
{ "name" : "李四" }
{ "name" : "赵强" }
>  



第[6]题_01-数据库__mongodb
03-查询.txt
...
统计查询结果的数量
两种方式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
方式一
db.集合名称.find(条件).count()
方式二
db.集合名称.count(条件)
例子：
查询年龄小于60的数据条目数
db.colc.find({age:{$lt:60}}).count()
db.colc.count({age:{$lt:60}})



第[7]题_01-数据库__mongodb
04-聚合.txt
...
分组
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.aggregate({_id:"$字段名"})
例子：按照classname的值来进行分组
> db.colc.aggregate({$group:{_id:'$classname'}})
{ "_id" : "java" }
{ "_id" : "php" }
{ "_id" : "python02" }
{ "_id" : "python" }
{ "_id" : null }
>
例子：按照classname的值来进行分组并统计人数
> db.colc.aggregate({$group:{_id:'$classname',num:{$sum:1}}})
{ "_id" : "java", "num" : 1 }
{ "_id" : "php", "num" : 1 }
{ "_id" : "python02", "num" : 1 }
{ "_id" : "python", "num" : 1 }
{ "_id" : null, "num" : 2 }
>
例子：分组统计小组人数，统计年龄平均值
> db.one.aggregate({$group:{_id:"$class",count:{$sum:1},pjnl:{$avg:"$age"}}})
{ "_id" : "php", "count" : 1, "pjnl" : 86 }
{ "_id" : "python", "count" : 2, "pjnl" : 28 }
例子：分组并得到最小值
> db.one.aggregate({$group:{_id:'$gender', minage:{$avg:'$age'}}})
{ "_id" : 1, "minage" : 52 }
{ "_id" : 0, "minage" : 38 }
>   



第[8]题_01-数据库__mongodb
04-聚合.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：按照年龄进行升序
> db.one.aggregate({$sort:{age:1}})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>
例子：按照主键降序显示
> db.one.aggregate({$sort:{_id:-1}})
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
>



第[9]题_01-数据库__mongodb
03-查询.txt
...
分页相关知识
1，限定显示几条
2，跳过几条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
limit(n)，显示n条
skip(m)，跳过m条
一般limit与skip同时使用，实现分页效果
例子：
每一页显示两个数据
第一页
db.集合名.find().skip(0).limit(2)
第二页
db.集合名.find().skip(2).limit(2)
第三页
db.集合名.find().skip(4).limit(2)
第四页
db.集合名.find().skip(6).limit(2)
（当前页码-1）*每页显示几个数据
第n页
db.集合名.find().skip((n-1)*2)



第[10]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
避免转义给字符串加哪个字母表示原始字符串
如何避免正则表达式中的内容被python解释器转义
在python写正则表达式要注意什么
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
注意使用r包裹一下
r , 表示需要原始字符串，不转义特殊字符
例如：
re_path(r"book/(\d+)/", bookview)



第[11]题_01-数据库__mongodb
03-查询.txt
...
自定义查询，使用js语句来查
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
find({
	$where:function(){
		return this.age>19
	}
})
例子：
查找班级名称为python02的
db.colc.find({
	$where:function(){
		return this.classname == "python02"
	}
})
查找年龄小于19岁的
db.colc.find({
	$where:function(){
		return this.age < 19 
	}
})
关键点：
查询条件字典中以
$where 为键
值是一个js的匿名函数
只需要函数return 一个布尔值即可
如果布尔的结果为true 那么该行数据会被显示
通常在匿函中的this代表了当前数据行对象



第[12]题_03-django__04-dj2vdo
191024模板.txt
...
 
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：



第[13]题_02-爬虫__解析库
02-python操作xpath.txt
...
导入etree
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
from lxml import etree



第[14]题_01-数据库__mongodb
03-查询.txt
...
去重
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.distinct(去重的字段)
例子：
查询所有的班级名称
db.colc.distinct("classname")
找出年龄大于17岁的，班级名称
db.colc.distinct("classname", {age:{$gt:17}})


第[15]题_01-数据库__mongodb
03-查询.txt
...
投影
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
功能：显示期望的字段
用法：
find(条件字典，投影字典)
投影字典的说明：
希望显示的字段，设置为1
如果不希望显示_id，设置它为0
例子：
查询结果中，只显示classname字段的值
db.getCollection('colc').find({},{classname:1})
db.colc.find({},{classname:1})
例子：
查询结果中，只显示classname字段的值，不显示_id的内容
db.getCollection('colc').find({},{classname:1, _id:0})
例子：
查找年龄在79，16岁的数据，只显示name，age
db.colc.find({age:{$in:[79,16]}},{name:1, age:1, _id:0})



第[16]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[17]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
如果存在，修改
如果不存在，新增
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.colc.save({_id:100,"name":"ww"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>  



第[18]题_01-数据库__mongodb
01-增删改查.txt
...
删除集合
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.tbtwo.drop()
true



第[19]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[20]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
python2和python3的range（100）的区别
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
python2返回列表，python3返回迭代器，节约内存



第[21]题_04-版本控制__01-git
01-入门.txt
...
查看日志
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
git log



第[22]题_04-版本控制__01-git
01-入门.txt
...
暂存区内容添加到版本库中
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
git commit -m '版本说明'



第[23]题_04-版本控制__01-git
01-入门.txt
...
仓库内容添加到暂存区
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》添加指定的文件
git add 文件名
》添加全部文件
git add .



第[24]题_04-版本控制__01-git
01-入门.txt
...
初始化设置当前目录为仓库目录
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
git init



第[25]题_03-django__02-模板
01-过滤器.txt
...
设置默认值的过滤器
当模板变量没有值时给默认值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
{{ errmsg|default:'无' }}



第[26]题_03-django__02-模板
01-过滤器.txt
...
求长度的过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
单词：length
例如：
{{ title|length }}



第[27]题_03-django__02-模板
01-过滤器.txt
...
改变日期显示格式的过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
单词：date
例如：
{{ book.bpub_data|date:'Y年-m月-d日' }}



第[28]题_03-django__02-模板
01-过滤器.txt
...
过滤器的使用格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
模板变量|过滤器：参数
例如：
{{ book.bpub_data|date:'Y年-m月-d日' }}



第[29]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起一个post请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
requests.post(url, params=参数字典)



第[30]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起一个get请求，带上参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
request.get(url, params=参数字典)
效果，会在url后拼上传递的参数
例如http://www.baidu.com/?name=zs&age=18
post请求同理



第[31]题_01-数据库__redis
06-python连redis.txt
...
获取string类型的键对应的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
连接对象.get(键)



第[32]题_01-数据库__mysql
01-相关操作.txt
...
远程连接数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
mysql -h ip地址 -p 端口号 -u用户名 -p
输入密码
例如：IP为192.168.206.1，端口为3306，用户名为root，密码为root
mysql -h 192.168.206.1 -p 3306 -uroot -p
请输入密码：root



第[33]题_01-数据库__redis
08-zset数据类型.txt
...
删除z1键中权值在4到10范围的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zremrangebyscore z1 4 10



第[34]题_01-数据库__redis
08-zset数据类型.txt
...
删除z1键里的两个成员two,three
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrem z1 two three



第[35]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键中数据three的权值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zscore z1 three



第[36]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键里权值在1到5范围的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrangebyscore z1 1 5



第[37]题_01-数据库__redis
06-list数据类型.txt
...
lis键中查找a
找到后从左向右删掉2个
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrem lis 2 a



第[38]题_01-数据库__redis
06-list数据类型.txt
...
lis键的0号数据改为pp
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lset lis 0 pp



第[39]题_01-数据库__redis
06-list数据类型.txt
...
获取lis键中最后四个元素
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrange lis -4 -1



第[40]题_01-数据库__redis
06-list数据类型.txt
...
获取lis键中的所有元素
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrange lis 0 -1



第[41]题_01-数据库__redis
06-list数据类型.txt
...
往lis键中数据a4后面添加数据n4
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> linsert lis after a4 n4



第[42]题_01-数据库__redis
06-list数据类型.txt
...
往键lis里面数据a1的前面
添加数据m1
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> linsert lis before a1 m1



第[43]题_01-数据库__redis
06-list数据类型.txt
...
从右侧插入数据
往lis键右侧插入数据 
a4  
a5
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> rpush lis a4 a5



第[44]题_01-数据库__redis
06-list数据类型.txt
...
取键名lis的数据
取0号到2号索引的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrange lis 0 2



第[45]题_01-数据库__redis
05-键命令.txt
...
查看键name的剩余时间
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> ttl name



第[46]题_01-数据库__redis
05-键命令.txt
...
设置键name的过期时间为6秒
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> expire name 6



第[47]题_01-数据库__redis
05-键命令.txt
...
删除多个键值对
删除stuname和classname两组键值对
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> del stuname classname



第[48]题_01-数据库__redis
05-键命令.txt
...
查看name键对应值的数据类型
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> type name



第[49]题_01-数据库__redis
05-键命令.txt
...
查看name键是否存在
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> exists name



第[50]题_01-数据库__redis
05-键命令.txt
...
查看以na开头的键
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> keys na*



第[51]题_01-数据库__redis
04-string数据类型.txt
...
获取多个键对应的值
获取name,age,gender键对应的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> mget name age gender



第[52]题_01-数据库__redis
04-string数据类型.txt
...
往键名为name的值中添加内容2019
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> append name 2019



第[53]题_01-数据库__redis
04-string数据类型.txt
...
一次性设置多个键值
name,zs
age,18
gender,ture
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> mset name zs age 18 gender true



第[54]题_01-数据库__redis
04-string数据类型.txt
...
设置name键对应的值zgl，5秒钟过期
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> setex name 5 zgl



第[55]题_01-数据库__redis
04-string数据类型.txt
...
修改classname的值为pythonOne
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> set classname pythonOne



第[56]题_01-数据库__redis
04-string数据类型.txt
...
获取classname对应的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> get classname



第[57]题_01-数据库__redis
04-string数据类型.txt
...
设置classname的值为python01
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> set classname python01



第[58]题_02-爬虫__requests爬虫
02-响应的属性与方法.txt
...
响应对象的text属性与content属性的相同点与不同点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
相同点：
都可以拿到响应的内容
不同点：
数据类型不一样
text拿到string类型
content拿到bytes类型
注意：
如果访问的目标是图片，文件，音频视频等，需要使用content属性来拿内容



第[59]题_01-数据库__mysql
05-查询.txt
...
分组与对已分的组进行过滤
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
group by 列 having 条件
意义：
对某一个列进行分组，同时按照某个条件对组进行过滤
例子：
select gender,count(*) from student group by gender having gender is not null;



第[60]题_01-数据库__mysql
05-查询.txt
...
聚合查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号：
count(*)	统计总数
max(列)		此列最大值
min(列)		此列最小值
sum(列)		此列总和
avg(列)		此列平均值
例子：
查询全部数据有多少条
select count(*) from student;
查询年龄最大的值
select max(age) from student;



第[61]题_01-数据库__mysql
05-查询.txt
...
范围查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
关键词：
in(值1，值n)			不连续范围内
between...and...	连续范围内
例子：
查询id值为1,3,6的学生
select * from student where id in (1,3,6);
查询id值在2到8之间的学生
select * from student where id between 2 and 8;



第[62]题_01-数据库__mysql
05-查询.txt
...
查询结果消除重复
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
select distinct 字段 from 表名;
例子：
select distinct gender from student;



第[63]题_01-数据库__mysql
05-查询.txt
...
查指定的字段，并且控制表头名称
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
select 字段1 as 表头1，字段n as 表头n from 表名；
例子：
select name as 姓名, age as 年龄 from student;



第[64]题_01-数据库__mysql
05-查询.txt
...
查询，只显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
select 字段1， 字段n from 表名；
例子：
select id, name from student;



第[65]题_01-数据库__mysql
04-数据行的操作.txt
...
修改数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
update 表名 set 列1=值1，列2=值2 where 条件
例子：
update student set name='赵云',age=23 where id=3;
注意：
一定不要漏了where 条件，否则所有数据都被改掉



第[66]题_01-数据库__mysql
04-数据行的操作.txt
...
删除指定的数据行
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
delete from 表名 where 条件；
例子：
delete from student where id>4;



第[67]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-缺省插入
只插入部分字段的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名（字段1，字段n） values(值1，值n);
例子：
insert into student (name) values('ggyy');



第[68]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-全列插入
全部字段的值都插入
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名 values(值1，值n)
例子：
insert into student values(0, 'pyhui',18);



第[69]题_01-数据库__mysql
03-数据表的操作.txt
...
修改表中字段-改字段名
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
alter table 表名 change 原字段名 新字段名 类型 约束;
例子：
alter table pistudent change score defen tinyint ;



第[70]题_01-数据库__mysql
03-数据表的操作.txt
...
修改表中字段的类型-仅改类型-不改字段名
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
alter table 表名 modify 字段名 约束;
例子：
alter table pistudent modify score char(3) default '60';



