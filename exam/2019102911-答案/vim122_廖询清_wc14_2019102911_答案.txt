
第[1]题_01-数据库__mongodb
03-查询.txt
...
分页相关知识
1，限定显示几条
2，跳过几条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
limit(n)，显示n条
skip(m)，跳过m条
一般limit与skip同时使用，实现分页效果
例子：
每一页显示两个数据
第一页
db.集合名.find().skip(0).limit(2)
第二页
db.集合名.find().skip(2).limit(2)
第三页
db.集合名.find().skip(4).limit(2)
第四页
db.集合名.find().skip(6).limit(2)
（当前页码-1）*每页显示几个数据
第n页
db.集合名.find().skip((n-1)*2)



第[2]题_01-数据库__mongodb
04-聚合.txt
...
分组
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.aggregate({_id:"$字段名"})
例子：按照classname的值来进行分组
> db.colc.aggregate({$group:{_id:'$classname'}})
{ "_id" : "java" }
{ "_id" : "php" }
{ "_id" : "python02" }
{ "_id" : "python" }
{ "_id" : null }
>
例子：按照classname的值来进行分组并统计人数
> db.colc.aggregate({$group:{_id:'$classname',num:{$sum:1}}})
{ "_id" : "java", "num" : 1 }
{ "_id" : "php", "num" : 1 }
{ "_id" : "python02", "num" : 1 }
{ "_id" : "python", "num" : 1 }
{ "_id" : null, "num" : 2 }
>
例子：分组统计小组人数，统计年龄平均值
> db.one.aggregate({$group:{_id:"$class",count:{$sum:1},pjnl:{$avg:"$age"}}})
{ "_id" : "php", "count" : 1, "pjnl" : 86 }
{ "_id" : "python", "count" : 2, "pjnl" : 28 }
例子：分组并得到最小值
> db.one.aggregate({$group:{_id:'$gender', minage:{$avg:'$age'}}})
{ "_id" : 1, "minage" : 52 }
{ "_id" : 0, "minage" : 38 }
>   



第[3]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
避免转义给字符串加哪个字母表示原始字符串
如何避免正则表达式中的内容被python解释器转义
在python写正则表达式要注意什么
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
注意使用r包裹一下
r , 表示需要原始字符串，不转义特殊字符
例如：
re_path(r"book/(\d+)/", bookview)



第[4]题_01-数据库__mongodb
04-聚合.txt
...
显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：不显示_id字段，只显示name字段
> db.one.aggregate({$project:{_id:0, name:1}})
{ "name" : "张三" }
{ "name" : "李四" }
{ "name" : "赵强" }
>  



第[5]题_01-数据库__mongodb
03-查询.txt
...
统计查询结果的数量
两种方式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
方式一
db.集合名称.find(条件).count()
方式二
db.集合名称.count(条件)
例子：
查询年龄小于60的数据条目数
db.colc.find({age:{$lt:60}}).count()
db.colc.count({age:{$lt:60}})



第[6]题_03-django__04-dj2vdo
191024模板.txt
...
for循环中的变量，显示序号-顺序显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
forloop.counter
》
例子格式：
{% for 变量 in 容器 %}
序号：{{ forloop.counter }}
变量
{% endfor %}
》
计数从0开始，使用
forloop.counter0



第[7]题_01-数据库__mongodb
04-聚合.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：按照年龄进行升序
> db.one.aggregate({$sort:{age:1}})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>
例子：按照主键降序显示
> db.one.aggregate({$sort:{_id:-1}})
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
>



第[8]题_01-数据库__redis
09-hash数据类型.txt
...
获取一共有多少个键值对
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hlen 键
例子：获取zs一共有多少个字段
hlen zs



第[9]题_01-数据库__mongodb
04-聚合.txt
...
分页
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
$limit：隠定显示条目数
$skip：跳过条目数
例子：限定只显示两条数据
> db.one.aggregate({$limit:2})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
例子：跳过一条数据
> db.one.aggregate({$skip:1})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }



第[10]题_01-数据库__mongodb
04-聚合.txt
...
匹配数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：查到年龄大于20的数据
> db.one.aggregate({$match:{age:{$gt:20}}})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>    



第[11]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
fun(*args,**kwargs)中的*args,**kwargs什么意思？
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
*args和**kwargs主要用于函数定义。你可以将不定数量的参数传递给一个函数。这里的不定的意思是:预先并不知道,函数使用者会传递多少个参数给你所以在这个场景下使用这两个关键字。
*args是 用来发送一个非键值对的可变数量的参 数列表给一个函数
**kwargs允许你将不定长度的键值对，作为参数传递给一个函数。



第[12]题_03-django__04-dj2vdo
191022路由url.txt
...
命名空间的使用
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
为了防止多个别名导致的冲突，在总路由定义命名空间
一，总路由定义命名空间
path(路径，include('应用名.urls', namespace='空间名'))
例如：path('cms1/', include('cms.urls', namespace='cms1'))
二，在应用的urls.py中定义一个变量
app_name = 应用名
例如：app_name=book



第[13]题_01-数据库__redis
09-hash数据类型.txt
...
添加单个哈希字段值对
设置zs键为哈希，存值
字段height 170
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hset 键 字段1 值1
例子：
hset zs height 170



第[14]题_02-爬虫__requests爬虫
02-响应的属性与方法.txt
...
响应对象的text属性与content属性的相同点与不同点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
相同点：
都可以拿到响应的内容
不同点：
数据类型不一样
text拿到string类型
content拿到bytes类型
注意：
如果访问的目标是图片，文件，音频视频等，需要使用content属性来拿内容



第[15]题_02-爬虫__解析库
01-xpath解析.txt
...
获取标签内容为：下一页> 的a标签，取它的href值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//a[text()="下一页>"]/@href



第[16]题_01-数据库__mongodb
03-查询.txt
...
去重
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.distinct(去重的字段)
例子：
查询所有的班级名称
db.colc.distinct("classname")
找出年龄大于17岁的，班级名称
db.colc.distinct("classname", {age:{$gt:17}})


第[17]题_01-数据库__mongodb
03-查询.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
以某某键进行升序排序
查询结果.sort(｛键：1｝)
以某某键进行降序排序
查询结果.sort(｛键：-1｝)
例子：
查询所有的数据，以age升序排序
db.colc.find().sort({age:1})
查询所有的数据，以age降序排序
db.colc.find().sort({age:-1})



第[18]题_01-数据库__mongodb
03-查询.txt
...
投影
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
功能：显示期望的字段
用法：
find(条件字典，投影字典)
投影字典的说明：
希望显示的字段，设置为1
如果不希望显示_id，设置它为0
例子：
查询结果中，只显示classname字段的值
db.getCollection('colc').find({},{classname:1})
db.colc.find({},{classname:1})
例子：
查询结果中，只显示classname字段的值，不显示_id的内容
db.getCollection('colc').find({},{classname:1, _id:0})
例子：
查找年龄在79，16岁的数据，只显示name，age
db.colc.find({age:{$in:[79,16]}},{name:1, age:1, _id:0})



第[19]题_01-数据库__mongodb
03-查询.txt
...
自定义查询，使用js语句来查
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
find({
	$where:function(){
		return this.age>19
	}
})
例子：
查找班级名称为python02的
db.colc.find({
	$where:function(){
		return this.classname == "python02"
	}
})
查找年龄小于19岁的
db.colc.find({
	$where:function(){
		return this.age < 19 
	}
})
关键点：
查询条件字典中以
$where 为键
值是一个js的匿名函数
只需要函数return 一个布尔值即可
如果布尔的结果为true 那么该行数据会被显示
通常在匿函中的this代表了当前数据行对象



第[20]题_01-数据库__mongodb
03-查询.txt
...
正则查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
find(｛键：/正则表达式/｝)
find(｛键：$regex:正则式str｝)
例子：
查询sku以abc开头的数据
db.products.find({sku:/^abc/})
例子：查询姓名以z开头的
db.colc.find({name:/^z/})



第[21]题_01-数据库__mongodb
03-查询.txt
...
逻辑运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
与，｛键1：值1， 键2：值2｝ 
或， ｛$or：[{},{}]｝
例子：
找年龄为19岁或者班级为java班的数据
db.colc.find({$or:[{age:19},{classname:"java"}]})
找年龄大于16岁或者班级为java班的数据
db.colc.find({$or:[{age:{$gt:16}},{classname:"java"}]})



第[22]题_01-数据库__mongodb
03-查询.txt
...
范围运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
在， $in
不在， $nin
例子：查询年龄在 16 19 22 岁的
db.colc.find({age:{$in:[16,19,22]}})



第[23]题_01-数据库__mongodb
03-查询.txt
...
比较运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号有：
等于，年龄等于18  ｛age:18｝
小于，$lt， less than  比如，年龄小于18 {age:{$lt:18}}
大于，$gt,  greater than
小于等于，$lte  less than equal
大于等于，$gte
不等于， $ne   
例子：
db.colc.find({age:{$gt:19}})



第[24]题_01-数据库__mongodb
03-查询.txt
...
查询，只拿一个
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.findOne(条件)



第[25]题_01-数据库__mongodb
03-查询.txt
...
一个条件的查找
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find(条件)



第[26]题_01-数据库__mongodb
03-查询.txt
...
查询所有
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find()



第[27]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[28]题_01-数据库__mongodb
02-数据行的操作.txt
...
修改数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.update(查找条件，修改内容，[{multi:true}])
情况一：查到数据，完全修改
例子：这种效果会把查到的结果完全的替代为修改的内容
查找姓名为zs的数据行，把整个数据修改年龄为20
> db.colc.update({name:"zs"},{age:20})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>   
情况二：查到数据，保留修改（只修改指定的字段）
例子，查找班级为python的数据，把年级改为2
> db.colc.update({classname:"python"},{$set:{grade:2}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
格式：
要修改的内容
{$set:{要修改的键：要修改的值}}



第[29]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
如果存在，修改
如果不存在，新增
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.colc.save({_id:100,"name":"ww"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>  



第[30]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.insert(字典)
例子：
> db.cola.insert({"name":"zs", "age":18})
WriteResult({ "nInserted" : 1 })
注意：
关于集合名称，如果操作的是一个不存在的集合
mongo会自动创建



第[31]题_01-数据库__mongodb
01-增删改查.txt
...
删除集合
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.tbtwo.drop()
true



第[32]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前数据库中的全部集合（全部数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> show collections
spider
stu
tbtwo
>



第[33]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[34]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前正在使用的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db
one



第[35]题_01-数据库__mongodb
01-增删改查.txt
...
使用数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
use 数据库名称
例子：
use one
> use one
switched to db one



第[36]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前全部的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
两种查询办法：
> show databases
> show dbs



第[37]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
创建一个线程队列队象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
代码：
import queue
q = queue.Queue()
补充：
生成一个容量为6的队列对象
q = queue.Queue(6)



第[38]题_03-django__04-dj2vdo
1920211530综合.txt
...
ALLOWED_HOSTS的功能
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
配置中ALLOWED_HOSTS的功能
只有列表中的ip才可以访问



第[39]题_03-django__04-dj2vdo
1920211530综合.txt
...
DEBUG模式的功能
位于settings.py中的DEBUG的功能
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1，开启后修改django代码并保存后，服务器会重启
2，如果项目中出现了错误，会在浏览器与控制台打印错误
3，上线以后需要设置把DEBUG=False
4，如果 DEBUG设置为False，必需设置ALLOWED_HOSTS



第[40]题_03-django__04-dj2vdo
1920211530综合.txt
...
web服务器，应用服务器，web应用框架
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
web服务器，处理http请求，例如nginx
应用服务器，处理逻辑的服务器
应用框架，封装好的编程语言



第[41]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
创建虚拟环境时指定python版本
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
mkvirtualenv --python==解释器的路径 虚拟环境名称
例子：
mkvirtualenv --python==c:\Python36\python.exe hy_env
说明：
如果同时装有python2 和 python3 在创建虚拟环境的时候需要指定版本，可以这样子搞



第[42]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
修改mkvirtualenv默认路径的办法
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
环境变量》系统变量
添加WORKON_HOME



第[43]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
进入虚拟环境所在的目录
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
cdvirtualenv



第[44]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
列出所有虚拟环境
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
lsvirtualenv



第[45]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
退出虚拟环境
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
deactivate



第[46]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
进入虚拟环境
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式
workon 环境名
例子
workon dailyfresh



第[47]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
创建虚拟环境
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
mkvirtualenv 虚拟环境名
例子：
mkvirtualenv dailyfresh



第[48]题_03-django__03-配置
02-模块与功能.txt
...
上传图片的目录配置
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，新建目录，用于存放用户上传的图片
例如，在static目录下创一个media目录
二，配置目录
在settings.py中配置
# 上传文件的目录保存
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/media')



第[49]题_03-django__03-配置
02-模块与功能.txt
...
如何定义一个视图类
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
导入View类，作为父类
自定义一个类，继承View类
例子：商品首页的页面渲染与展示
from django.views.generic import View
class IndexView(View):
    """首页"""
    def get(self,request):
        """ 显示首页 """
        return render(request, "index.html")



第[50]题_03-django__02-模板
02-模板语言.txt
...
在模板页中如何加载静态文件
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，加载模板的配置
{% load staticfiles %}
二，利用配置完成静态路径的拼接
如果有个图片存放在
项目目录/static/image/a.jpg
那么这样子拼路径
{% static 'image/a.jpg'}



第[51]题_01-数据库__redis
09-hash数据类型.txt
...
删除哈希数据某一个字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hdel 键 字段
例子：删除zs的weight字段
hdel zs weight



第[52]题_01-数据库__redis
09-hash数据类型.txt
...
删除整个哈希数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
del 键
例子：删掉键为zs的哈希数据
del zs



第[53]题_01-数据库__redis
09-hash数据类型.txt
...
一次获取哈希值中多个字段的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hmget 键 字段1 字段n
例子：获取zs的height字段值，weight字段值
hmget zs height weight



第[54]题_01-数据库__redis
09-hash数据类型.txt
...
获取一个哈希数据某个字段的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hget 键 字段
例子：获取zs键对应的哈希数据中height字段的值
hget zs height



第[55]题_01-数据库__redis
09-hash数据类型.txt
...
添加多个哈希字段值对
设置ls键为哈希，存多个字段值对
字段height 177
字段weight 66
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hmset 键 字段1 值1 字段n 值n
例子：
hmset ls height 177 weight 66



第[56]题_01-数据库__redis
09-hash数据类型.txt
...
哈希的数据结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
redis数据库是键值形式的
比如0号数据库有一个name键存的字符串，有一个lis键存的列表，结构如下：
｛"name":"zs", "lis":[1,2,3]｝
如果该库中有一个键名为ha的数据是哈希类型，它在redis中的形态为：
｛"name":"zs", "lis":[1,2,3], "ha":{"f1":"v1","f2":"v2"}｝
博客：
https://blog.csdn.net/ifubing/article/details/101427123



第[57]题_02-爬虫__解析库
02-python操作xpath.txt
...
xpath的使用套招
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，实例化生成一个element对象
from lxml import etree
obj = etree.HTML(字符串html内容)
二，对象.xpath（xpath表达式)
res = obj.xpath(表达式)
# res是一个列表，如果列表成员仍然是element对象，他们仍可以使用xpath方法


第[58]题_02-爬虫__解析库
01-xpath解析.txt
...
从选取到的一堆节点中拿到指定索引的节点对象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
办法：利用索引
例子：//a[1]
注意：起始值为1



第[59]题_04-版本控制__01-git
01-入门.txt
...
合并分支
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
git merge 另一个分支名称
例子：
一，切换到接收分支
git checkout 接收分支
$ git checkout master
二，接收分支合并数据
》接收dev分支的代码
git merge dev
》接收zhaoyun分支的代码
git merge zhaoyun



第[60]题_03-django__03-配置
01-基本配置.txt
...
静态目录的配置
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》一，新建一个static目录
》二，配置这个目录 
在settings.py中 
STATICFILES_DIR = [os.path.join(BASE_DIR, 'static')]  # 静态目录的高以置



第[61]题_02-爬虫__requests爬虫
03-经验小结.txt
...
如何获取下一页的URL地址
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，寻找URL规律，根据规律来拼下一页
二，通过"下一页"链接url来找



第[62]题_02-爬虫__解析库
02-python操作xpath.txt
...
利用Element对象的xpath方法取值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
返回值 = Element对象.xpath(字符串xpath选择语句)
注意：
返回值是列表类型
如果返回值是一个节点
那么该节点，仍然可以继续使用xpath方法



第[63]题_02-爬虫__解析库
02-python操作xpath.txt
...
把一个html字符串转换为Element对象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
Element对象 = etree.HTML(html字符串)
备注，Element对象具有xpath方法



第[64]题_02-爬虫__解析库
02-python操作xpath.txt
...
导入etree
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
from lxml import etree



第[65]题_02-爬虫__解析库
01-xpath解析.txt
...
取notbook标签中name值包含m的标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//notbook[contains(@name,'m')]



第[66]题_02-爬虫__解析库
01-xpath解析.txt
...
选取mon标签中class属性值中包含m的
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//mon[contains(@class,"m")]



第[67]题_02-爬虫__解析库
01-xpath解析.txt
...
与或
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
and 
or 
例子：
选取notbook标签，要求该标签具有name属性，同时class属性值为active
//notbook[@name and @class="active"]



第[68]题_02-爬虫__解析库
01-xpath解析.txt
...
获取节点的文本
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
节点/text()



第[69]题_02-爬虫__解析库
01-xpath解析.txt
...
获取节点的属性
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
节点/@属性名



第[70]题_02-爬虫__解析库
01-xpath解析.txt
...
选取所有的notbook标签或者mon标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
//notbook | //mon



