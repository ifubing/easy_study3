
第[1]题_02-爬虫__requests爬虫
02-响应的属性与方法.txt
...
响应对象的text属性与content属性的相同点与不同点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
相同点：
都可以拿到响应的内容
不同点：
数据类型不一样
text拿到string类型
content拿到bytes类型
注意：
如果访问的目标是图片，文件，音频视频等，需要使用content属性来拿内容



第[2]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起一个带请求头的get请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
requests.get(网址，headers=字典)



第[3]题_01-数据库__mysql
02-数据库操作.txt
...
创建数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
create database 数据库名 charset=utf8;
例子：
create database pyhui charset=utf8;



第[4]题_01-数据库__redis
02-远程连接.txt
...
python远程连接redis的配置
如何让windows的python可以连接上centos的redis服务
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1，centos关闭防火墙对6379端口的保护
2，redis配置，bind项目注释掉（默认: bind 127.0.0.1)
3, redis配置，保护模式关闭（protected-mode no）



第[5]题_01-数据库__redis
01-安装与配置.txt
...
如何选择数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
select n
n的取值范围是0-15
select 5
代表选取了索引值为5的redis数据库


第[6]题_02-爬虫__解析库
01-xpath解析.txt
...
获取标签内容为：下一页> 的a标签，取它的href值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//a[text()="下一页>"]/@href



第[7]题_01-数据库__mysql
02-数据库操作.txt
...
切换数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
use 数据库名;
例子：
use test;



第[8]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
避免转义给字符串加哪个字母表示原始字符串
如何避免正则表达式中的内容被python解释器转义
在python写正则表达式要注意什么
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
注意使用r包裹一下
r , 表示需要原始字符串，不转义特殊字符
例如：
re_path(r"book/(\d+)/", bookview)



第[9]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起一个get请求，带上参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
request.get(url, params=参数字典)
效果，会在url后拼上传递的参数
例如http://www.baidu.com/?name=zs&age=18
post请求同理



第[10]题_01-数据库__mysql
03-数据表的操作.txt
...
查看建表语句
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
show create table 表名;
例子：
show create table student;



第[11]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[12]题_01-数据库__redis
09-hash数据类型.txt
...
获取一个哈键的所有字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hkeys 键
例如：获取一个键名为zs的哈希数据中所有字段
hkeys zs



第[13]题_03-django__04-dj2vdo
191024模板.txt
...
模板变量的显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
{{ 变量名 }}
说明：变量的来源，来自视图的传递



第[14]题_03-django__04-dj2vdo
191022路由url.txt
...
命名空间的使用
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
为了防止多个别名导致的冲突，在总路由定义命名空间
一，总路由定义命名空间
path(路径，include('应用名.urls', namespace='空间名'))
例如：path('cms1/', include('cms.urls', namespace='cms1'))
二，在应用的urls.py中定义一个变量
app_name = 应用名
例如：app_name=book



第[15]题_03-django__04-dj2vdo
1920211530综合.txt
...
url转换器
path方法捕捉路径上的参数
限定参数的类型
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
path('book/publisher/<int:publisher_id>/', 视图）
本写法限定了路径中publisher_id位置的类型，为int类型
默认的转换器是str
小结：
url转换器限定的是什么类型，视图函数得到的参数就是什么类型
常用的类型有int, str



第[16]题_05-linux__01-压缩与解压缩.txt
01-操作.txt
...
gzip压缩
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
gzip 文件1 文件n
原文件会消失，会有新的压缩文件出来，以.gz结尾
单个文件压缩，并不会合并为一个压缩包
不可压缩目录



第[17]题_04-版本控制__02-github
01-操作.txt
...
简洁的查看log日志
一行显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
$ git log --pretty=oneline



第[18]题_03-django__04-dj2vdo
191022路由url.txt
...
给一个url起一个别名
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
path('login/', views.login, name='login')



第[19]题_01-数据库__redis
04-string数据类型.txt
...
获取classname对应的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> get classname



第[20]题_02-爬虫__requests爬虫
02-响应的属性与方法.txt
...
根据图片网址img_url，保存图片
介绍流程
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1 发起请求，获取响应对象。
2 读取响应对象中的内容，用content属性读，得到图片的内容，bytes类型
3 保存图片，以字节流模式写入内容



第[21]题_01-数据库__redis
06-python连redis.txt
...
添加string类型的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
连接对象.set(键，值)



第[22]题_01-数据库__mysql
05-查询.txt
...
分组与对已分的组进行过滤
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
group by 列 having 条件
意义：
对某一个列进行分组，同时按照某个条件对组进行过滤
例子：
select gender,count(*) from student group by gender having gender is not null;



第[23]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[24]题_01-数据库__mysql
03-数据表的操作.txt
...
创建数据表
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
create table 表名（字段 类型 约束）
示例：
》创建一个表，主键primary key， 自增长 auto_increment
create table student(id int primary key auto_increment);
》删掉它
drop table student;
》换个姿式再创建一次，不允许为空 not null
create table student(
id int auto_increment primary key,
name varchar(20) not null
);
》再删掉
drop table student;
》再创建，default 0
create table student(
id int auto_increment primary key,
name varchar(20) not null,
age int not null,
gender bit default 1,
address varchar(20),
isDelete bit default 0
);



第[25]题_01-数据库__redis
09-hash数据类型.txt
...
删除整个哈希数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
del 键
例子：删掉键为zs的哈希数据
del zs



第[26]题_01-数据库__mysql
03-数据表的操作.txt
...
查看表结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
desc 表名;
desc student;



第[27]题_01-数据库__mongodb
03-查询.txt
...
分页相关知识
1，限定显示几条
2，跳过几条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
limit(n)，显示n条
skip(m)，跳过m条
一般limit与skip同时使用，实现分页效果
例子：
每一页显示两个数据
第一页
db.集合名.find().skip(0).limit(2)
第二页
db.集合名.find().skip(2).limit(2)
第三页
db.集合名.find().skip(4).limit(2)
第四页
db.集合名.find().skip(6).limit(2)
（当前页码-1）*每页显示几个数据
第n页
db.集合名.find().skip((n-1)*2)



第[28]题_01-数据库__redis
09-hash数据类型.txt
...
删除哈希数据某一个字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hdel 键 字段
例子：删除zs的weight字段
hdel zs weight



第[29]题_03-django__04-dj2vdo
1920211530综合.txt
...
用代码运行一个项目
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
python manage.py runserver
期望它以指定的ip和端口运行
python mange.py runserver IP地址：端口



第[30]题_02-爬虫__requests爬虫
03-经验小结.txt
...
如何获取下一页的URL地址
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，寻找URL规律，根据规律来拼下一页
二，通过"下一页"链接url来找



第[31]题_01-数据库__redis
06-list数据类型.txt
...
从右侧插入数据
往lis键右侧插入数据 
a4  
a5
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> rpush lis a4 a5



第[32]题_03-django__04-dj2vdo
191022路由url.txt
...
re_path的使用
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》格式：
re_path(正则式，视图）
注意：使用前确保re_path导入了
》导入，re_path的导入与path的导入在同一个位置
from django.urls import re_path
》使用
例如：匹配 127.0.0.1/
re_path(r"^$", views.article)
例如：匹配路径中的年份  127.0.0.1/list/2019
repath(r"^list/(?P<year>\d{4}/"), views.article_list)
例如：匹配路径中的月份   
re_path(r"list/(?P<month>\d{2}/"), views.article_list)



第[33]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前全部的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
两种查询办法：
> show databases
> show dbs



第[34]题_01-数据库__redis
07-set数据类型.txt
...
获取s1键里的成员值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> smembers s1



第[35]题_01-数据库__mysql
02-数据库操作.txt
...
查看所有的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
show databases;



第[36]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起请求，伪装为浏览器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
办法，发起请求时，在请求头中添加user-agent数据



第[37]题_01-数据库__mysql
03-数据表的操作.txt
...
往表中添加字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
alter table 表名 add 字段 类型 约束;
例子：
alter table pistudent add score int default 60;



第[38]题_03-django__04-dj2vdo
191024模板.txt
...
if标签基本用法
if...else...二路分支的格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% if 条件 %}
成立时显示
{% else %}
不成立时显示
{% endif %}
关于条件：
可以是比较大小，判断等于，成员运算，等等



第[39]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起一个get请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
# 导入模块
import request
# 发起请求
响应对象 = requests.get(网址)



第[40]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
谈下python的GIL
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。
如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。
多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大



第[41]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键的所有成员值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrange z1 0 -1



第[42]题_05-linux__01-压缩与解压缩.txt
01-操作.txt
...
bzip2压缩
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
bzip2 文件1 文件n
被压缩文件会消失，新生成的压缩文件以.bz2结尾
单个文件被压缩，并不会合并成一个压缩包
不可以压缩目录



第[43]题_03-django__04-dj2vdo
191024视图.txt
...
视图给模板传递参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
render(request, 模板名, 字典)



第[44]题_05-linux__01-压缩与解压缩.txt
01-操作.txt
...
gzip解压缩
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
gunzip 被压缩的文件



第[45]题_03-django__04-dj2vdo
191024视图.txt
...
reverse函数反转路径-不带参数的反转
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》使用前记得确保导入了
from django.shortcuts import reverse
》格式
reverse(“命名空间：别名”）
reverse（“别名”）



第[46]题_01-数据库__redis
06-list数据类型.txt
...
往lis键中数据a4后面添加数据n4
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> linsert lis after a4 n4



第[47]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-全列插入
全部字段的值都插入
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名 values(值1，值n)
例子：
insert into student values(0, 'pyhui',18);



第[48]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键中数据three的权值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zscore z1 three



第[49]题_01-数据库__redis
06-list数据类型.txt
...
lis键中查找a
找到后从左向右删掉2个
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrem lis 2 a



第[50]题_01-数据库__mysql
01-相关操作.txt
...
查看数据库的版本
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
select version();



第[51]题_03-django__03-配置
02-模块与功能.txt
...
上传图片的目录配置
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，新建目录，用于存放用户上传的图片
例如，在static目录下创一个media目录
二，配置目录
在settings.py中配置
# 上传文件的目录保存
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/media')



第[52]题_01-数据库__redis
06-python连redis.txt
...
python连redis需要安装的包
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
pip install redis



第[53]题_01-数据库__mysql
05-查询.txt
...
判空查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
关键词：
is null			判断为空
is not null		判断非空
例子：
查询gender值为null的数据
select * from student where gender is null;



第[54]题_01-数据库__redis
04-string数据类型.txt
...
修改classname的值为pythonOne
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> set classname pythonOne



第[55]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
获取当前代码中所有的线程对象，得到一个列表
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
threading.enumerate()
[<_MainThread(MainThread, started 22116)>, <Thread(Thread-1, started 16752)>, <Thread(Thread-2, started 14352)>] 总的



第[56]题_03-django__04-dj2vdo
1920211530综合.txt
...
视图中获取get方式传递过来的参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
在视图中通过
request.GET 获取get传参的字典
通过request.GET[键] 获取字典中键所对应的值



第[57]题_01-数据库__mysql
05-查询.txt
...
查询中的比较运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号：
等于 =
大于 >
小于 <
大于等于 >=
小于等于 <=
不等于 !=
例子：
查询gender字段不为0的数据
select * from student where gender != 0;



第[58]题_01-数据库__mysql
05-查询.txt
...
查指定的字段，并且控制表头名称
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
select 字段1 as 表头1，字段n as 表头n from 表名；
例子：
select name as 姓名, age as 年龄 from student;



第[59]题_01-数据库__redis
09-hash数据类型.txt
...
获取一共有多少个键值对
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hlen 键
例子：获取zs一共有多少个字段
hlen zs



第[60]题_01-数据库__mysql
02-数据库操作.txt
...
删除数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
drop database 数据库名;
例子：
drop database pyhui;



第[61]题_01-数据库__redis
06-python连redis.txt
...
删除键name,键age
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
连接对象.delete("name", "age")



第[62]题_01-数据库__mysql
05-查询.txt
...
查询，只显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
select 字段1， 字段n from 表名；
例子：
select id, name from student;



第[63]题_01-数据库__redis
09-hash数据类型.txt
...
添加单个哈希字段值对
设置zs键为哈希，存值
字段height 170
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hset 键 字段1 值1
例子：
hset zs height 170



第[64]题_01-数据库__mysql
05-查询.txt
...
having与where的区别
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
having对分组后的结果进行过滤
where对原始的查询数据进行过滤
where能做的having都能够做，having功能更加，但是过滤的性能弱一些



第[65]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
安装virtualenvwrapper
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》windows系统的安装
pip install virtualenvwrapper-win
》linux系统的安装
pip install virtualenvwrapper
直接安装virtualenvwrapper，会自动安装virtualenv



第[66]题_01-数据库__mysql
03-数据表的操作.txt
...
查看当前库里的所有数据表
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
show tables;



第[67]题_03-django__04-dj2vdo
1920211530综合.txt
...
web服务器，应用服务器，web应用框架
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
web服务器，处理http请求，例如nginx
应用服务器，处理逻辑的服务器
应用框架，封装好的编程语言



第[68]题_03-django__04-dj2vdo
191024模板.txt
...
开始行与结束行的判断
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》判断是否是开始行
forloop.first
》判断是否是结束行
forloop.last
》例子
{% for book in books %}
{% if forloop.first %}
代码一
{% elif forloop.last %}
代码二
｛% endif %}
{% endfor %}
》说明
一般会与if判断一起使用



第[69]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
创建虚拟环境
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
mkvirtualenv 虚拟环境名
例子：
mkvirtualenv dailyfresh



第[70]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-缺省插入
只插入部分字段的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名（字段1，字段n） values(值1，值n);
例子：
insert into student (name) values('ggyy');



