
第[1]题_01-数据库__mongodb
04-聚合.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：按照年龄进行升序
> db.one.aggregate({$sort:{age:1}})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>
例子：按照主键降序显示
> db.one.aggregate({$sort:{_id:-1}})
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
>



第[2]题_01-数据库__redis
09-hash数据类型.txt
...
获取一共有多少个键值对
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hlen 键
例子：获取zs一共有多少个字段
hlen zs



第[3]题_01-数据库__mongodb
04-聚合.txt
...
分页
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
$limit：隠定显示条目数
$skip：跳过条目数
例子：限定只显示两条数据
> db.one.aggregate({$limit:2})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
例子：跳过一条数据
> db.one.aggregate({$skip:1})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }



第[4]题_01-数据库__mongodb
03-查询.txt
...
分页相关知识
1，限定显示几条
2，跳过几条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
limit(n)，显示n条
skip(m)，跳过m条
一般limit与skip同时使用，实现分页效果
例子：
每一页显示两个数据
第一页
db.集合名.find().skip(0).limit(2)
第二页
db.集合名.find().skip(2).limit(2)
第三页
db.集合名.find().skip(4).limit(2)
第四页
db.集合名.find().skip(6).limit(2)
（当前页码-1）*每页显示几个数据
第n页
db.集合名.find().skip((n-1)*2)



第[5]题_01-数据库__mongodb
04-聚合.txt
...
匹配数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：查到年龄大于20的数据
> db.one.aggregate({$match:{age:{$gt:20}}})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>    



第[6]题_01-数据库__mongodb
04-聚合.txt
...
分组
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.aggregate({_id:"$字段名"})
例子：按照classname的值来进行分组
> db.colc.aggregate({$group:{_id:'$classname'}})
{ "_id" : "java" }
{ "_id" : "php" }
{ "_id" : "python02" }
{ "_id" : "python" }
{ "_id" : null }
>
例子：按照classname的值来进行分组并统计人数
> db.colc.aggregate({$group:{_id:'$classname',num:{$sum:1}}})
{ "_id" : "java", "num" : 1 }
{ "_id" : "php", "num" : 1 }
{ "_id" : "python02", "num" : 1 }
{ "_id" : "python", "num" : 1 }
{ "_id" : null, "num" : 2 }
>
例子：分组统计小组人数，统计年龄平均值
> db.one.aggregate({$group:{_id:"$class",count:{$sum:1},pjnl:{$avg:"$age"}}})
{ "_id" : "php", "count" : 1, "pjnl" : 86 }
{ "_id" : "python", "count" : 2, "pjnl" : 28 }
例子：分组并得到最小值
> db.one.aggregate({$group:{_id:'$gender', minage:{$avg:'$age'}}})
{ "_id" : 1, "minage" : 52 }
{ "_id" : 0, "minage" : 38 }
>   



第[7]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前全部的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
两种查询办法：
> show databases
> show dbs



第[8]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
避免转义给字符串加哪个字母表示原始字符串
如何避免正则表达式中的内容被python解释器转义
在python写正则表达式要注意什么
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
注意使用r包裹一下
r , 表示需要原始字符串，不转义特殊字符
例如：
re_path(r"book/(\d+)/", bookview)



第[9]题_01-数据库__mongodb
03-查询.txt
...
统计查询结果的数量
两种方式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
方式一
db.集合名称.find(条件).count()
方式二
db.集合名称.count(条件)
例子：
查询年龄小于60的数据条目数
db.colc.find({age:{$lt:60}}).count()
db.colc.count({age:{$lt:60}})



第[10]题_01-数据库__mongodb
04-聚合.txt
...
显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：不显示_id字段，只显示name字段
> db.one.aggregate({$project:{_id:0, name:1}})
{ "name" : "张三" }
{ "name" : "李四" }
{ "name" : "赵强" }
>  



第[11]题_03-django__04-dj2vdo
191024模板.txt
...
for循环中的变量，显示序号-顺序显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
forloop.counter
》
例子格式：
{% for 变量 in 容器 %}
序号：{{ forloop.counter }}
变量
{% endfor %}
》
计数从0开始，使用
forloop.counter0



第[12]题_01-数据库__mongodb
03-查询.txt
...
去重
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.distinct(去重的字段)
例子：
查询所有的班级名称
db.colc.distinct("classname")
找出年龄大于17岁的，班级名称
db.colc.distinct("classname", {age:{$gt:17}})


第[13]题_01-数据库__mongodb
03-查询.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
以某某键进行升序排序
查询结果.sort(｛键：1｝)
以某某键进行降序排序
查询结果.sort(｛键：-1｝)
例子：
查询所有的数据，以age升序排序
db.colc.find().sort({age:1})
查询所有的数据，以age降序排序
db.colc.find().sort({age:-1})



第[14]题_01-数据库__mongodb
03-查询.txt
...
投影
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
功能：显示期望的字段
用法：
find(条件字典，投影字典)
投影字典的说明：
希望显示的字段，设置为1
如果不希望显示_id，设置它为0
例子：
查询结果中，只显示classname字段的值
db.getCollection('colc').find({},{classname:1})
db.colc.find({},{classname:1})
例子：
查询结果中，只显示classname字段的值，不显示_id的内容
db.getCollection('colc').find({},{classname:1, _id:0})
例子：
查找年龄在79，16岁的数据，只显示name，age
db.colc.find({age:{$in:[79,16]}},{name:1, age:1, _id:0})



第[15]题_01-数据库__mongodb
03-查询.txt
...
正则查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
find(｛键：/正则表达式/｝)
find(｛键：$regex:正则式str｝)
例子：
查询sku以abc开头的数据
db.products.find({sku:/^abc/})
例子：查询姓名以z开头的
db.colc.find({name:/^z/})



第[16]题_01-数据库__mongodb
03-查询.txt
...
逻辑运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
与，｛键1：值1， 键2：值2｝ 
或， ｛$or：[{},{}]｝
例子：
找年龄为19岁或者班级为java班的数据
db.colc.find({$or:[{age:19},{classname:"java"}]})
找年龄大于16岁或者班级为java班的数据
db.colc.find({$or:[{age:{$gt:16}},{classname:"java"}]})



第[17]题_01-数据库__mongodb
03-查询.txt
...
范围运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
在， $in
不在， $nin
例子：查询年龄在 16 19 22 岁的
db.colc.find({age:{$in:[16,19,22]}})



第[18]题_01-数据库__mongodb
03-查询.txt
...
比较运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号有：
等于，年龄等于18  ｛age:18｝
小于，$lt， less than  比如，年龄小于18 {age:{$lt:18}}
大于，$gt,  greater than
小于等于，$lte  less than equal
大于等于，$gte
不等于， $ne   
例子：
db.colc.find({age:{$gt:19}})



第[19]题_01-数据库__mongodb
03-查询.txt
...
查询，只拿一个
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.findOne(条件)



第[20]题_01-数据库__mongodb
03-查询.txt
...
一个条件的查找
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find(条件)



第[21]题_01-数据库__mongodb
03-查询.txt
...
查询所有
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find()



第[22]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[23]题_01-数据库__mongodb
02-数据行的操作.txt
...
修改数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.update(查找条件，修改内容，[{multi:true}])
情况一：查到数据，完全修改
例子：这种效果会把查到的结果完全的替代为修改的内容
查找姓名为zs的数据行，把整个数据修改年龄为20
> db.colc.update({name:"zs"},{age:20})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>   
情况二：查到数据，保留修改（只修改指定的字段）
例子，查找班级为python的数据，把年级改为2
> db.colc.update({classname:"python"},{$set:{grade:2}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
格式：
要修改的内容
{$set:{要修改的键：要修改的值}}



第[24]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
如果存在，修改
如果不存在，新增
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.colc.save({_id:100,"name":"ww"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>  



第[25]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.insert(字典)
例子：
> db.cola.insert({"name":"zs", "age":18})
WriteResult({ "nInserted" : 1 })
注意：
关于集合名称，如果操作的是一个不存在的集合
mongo会自动创建



第[26]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前数据库中的全部集合（全部数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> show collections
spider
stu
tbtwo
>



第[27]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前正在使用的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db
one



第[28]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
谈下python的GIL
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。
如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。
多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大



第[29]题_03-django__04-dj2vdo
191024视图.txt
...
reverse函数反转-带关键词参数的反转
路由的路径匹配中有关键词捕获时（命名分组的正则表达式）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
reverse（别名，kwargs=｛关键词1：值1，关键词2：值2｝)
例子：
detail_url= reverse("detail", kwargs={"article_id":16})
效果：会反向生成别名为detail的路径，同时把article_id的数据拼到对应的位置



第[30]题_03-django__04-dj2vdo
191024视图.txt
...
reverse函数反转路径-不带参数的反转
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》使用前记得确保导入了
from django.shortcuts import reverse
》格式
reverse(“命名空间：别名”）
reverse（“别名”）



第[31]题_03-django__04-dj2vdo
191024视图.txt
...
视图给模板传递参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
render(request, 模板名, 字典)



第[32]题_03-django__04-dj2vdo
191024视图.txt
...
模板的渲染，
把模板文件的内容获取出来
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
方式一：render_to_string
》导入
from django.template.loader import render_to_string
》在视图中使用
def index(request):
	html = render_to_string(模板名.html)
	return HttpResponse(html)
》说明
这个是render函数的基本，了解即可
方式二: render 
》导入
from django.shortcuts import render
》在视图中使用
def index(request):
	return render(request, 模板名.html)



第[33]题_03-django__04-dj2vdo
191024模板.txt
...
遍历容器无数据时的显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
｛% for 临时变量 in 容器 %}
 	临时变量
｛% empty %}
无数据
｛% endfor %｝



第[34]题_03-django__04-dj2vdo
191024模板.txt
...
开始行与结束行的判断
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》判断是否是开始行
forloop.first
》判断是否是结束行
forloop.last
》例子
{% for book in books %}
{% if forloop.first %}
代码一
{% elif forloop.last %}
代码二
｛% endif %}
{% endfor %}
》说明
一般会与if判断一起使用



第[35]题_03-django__04-dj2vdo
191024模板.txt
...
 
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：



第[36]题_03-django__04-dj2vdo
191024模板.txt
...
字典遍历，同时得到键与值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{% for key, val in persion.items %}
key--val
{% endfor %}



第[37]题_03-django__04-dj2vdo
191024模板.txt
...
for遍历，逆序遍历
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% for 临时变量 in 容器 reversed %}
临时变量
{% endfor %}



第[38]题_03-django__04-dj2vdo
191024模板.txt
...
if标签基本用法
if...else...二路分支的格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% if 条件 %}
成立时显示
{% else %}
不成立时显示
{% endif %}
关于条件：
可以是比较大小，判断等于，成员运算，等等



第[39]题_03-django__04-dj2vdo
191024模板.txt
...
模板变量的显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
{{ 变量名 }}
说明：变量的来源，来自视图的传递



第[40]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
队列中的等待
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
队列.join()
可以让任务没有完成的队列，阻塞



第[41]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
队列中计数器减一
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
队列.task_done()
补充：
一般与队列等待共同使用



第[42]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
创建一个线程队列队象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
代码：
import queue
q = queue.Queue()
补充：
生成一个容量为6的队列对象
q = queue.Queue(6)



第[43]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
线程锁的定义与使用
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
定义
import threading
生成线程锁对象
锁对象 = threading.Lock()
上锁
锁对象.acquire()
解锁
锁对象.release()



第[44]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
让当前的线程全部执行完毕后
主线程再进行下一条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
线程对象.join（）
例子：
t.join()



第[45]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
线程类的定义与启动
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
自定义一个类
让该类继承threading.Thread
同时在自定义类中重写run方法
就可
例子：
class Drawing(threading.Thread):
    def run(self):
        for x in range(3):
            print('正在绘制图片', x)
            time.sleep(1)
》线程类实例化为一个对象并运行：
t2 = Drawing()
t2.start()



第[46]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
获取当前线程的对象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
threading.current_thread()



第[47]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
获取当前代码中所有的线程对象，得到一个列表
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
threading.enumerate()
[<_MainThread(MainThread, started 22116)>, <Thread(Thread-1, started 16752)>, <Thread(Thread-2, started 14352)>] 总的



第[48]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
如何启动一个线程
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》导入线程模块
import threading
》创建线程对象
t = threading.Thread(target=函数体，args=(参数,))
》让线程对象运行起来
t.start()
明确主线程与子线程的执行与等待关系



第[49]题_02-爬虫__解析库
01-xpath解析.txt
...
获取节点的属性
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
节点/@属性名



第[50]题_01-数据库__mysql
05-查询.txt
...
聚合查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号：
count(*)	统计总数
max(列)		此列最大值
min(列)		此列最小值
sum(列)		此列总和
avg(列)		此列平均值
例子：
查询全部数据有多少条
select count(*) from student;
查询年龄最大的值
select max(age) from student;



第[51]题_01-数据库__mysql
05-查询.txt
...
范围查询
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
关键词：
in(值1，值n)			不连续范围内
between...and...	连续范围内
例子：
查询id值为1,3,6的学生
select * from student where id in (1,3,6);
查询id值在2到8之间的学生
select * from student where id between 2 and 8;



第[52]题_01-数据库__mysql
05-查询.txt
...
查询中的比较运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号：
等于 =
大于 >
小于 <
大于等于 >=
小于等于 <=
不等于 !=
例子：
查询gender字段不为0的数据
select * from student where gender != 0;



第[53]题_01-数据库__mysql
04-数据行的操作.txt
...
查询数据表中全部数据，查看全部字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
select * from 表名;
例子：
select * from student;



第[54]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-缺省插入
只插入部分字段的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名（字段1，字段n） values(值1，值n);
例子：
insert into student (name) values('ggyy');



第[55]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-全列插入
全部字段的值都插入
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名 values(值1，值n)
例子：
insert into student values(0, 'pyhui',18);



第[56]题_01-数据库__mysql
03-数据表的操作.txt
...
往表中添加字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
alter table 表名 add 字段 类型 约束;
例子：
alter table pistudent add score int default 60;



第[57]题_01-数据库__mysql
03-数据表的操作.txt
...
删除数据表
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
drop table 表名
示例：
drop table one;



第[58]题_01-数据库__mysql
03-数据表的操作.txt
...
查看当前库里的所有数据表
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
show tables;



第[59]题_01-数据库__mysql
02-数据库操作.txt
...
切换数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
use 数据库名;
例子：
use test;



第[60]题_01-数据库__mysql
02-数据库操作.txt
...
查看所有的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
show databases;



第[61]题_01-数据库__redis
01-安装与配置.txt
...
如何选择数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
select n
n的取值范围是0-15
select 5
代表选取了索引值为5的redis数据库


第[62]题_01-数据库__redis
01-安装与配置.txt
...
默认的数据库数量
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
16
取值范围是0-15



第[63]题_01-数据库__redis
01-安装与配置.txt
...
如何查看redis是否启动
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
ps aux|grep redis
[root@192 ~]# ps aux|grep redis



第[64]题_01-数据库__redis
01-安装与配置.txt
...
如何启动服务端
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
redis-server 配置的地址
[root@192 ~]# redis-server /etc/redis/redis.conf



第[65]题_01-数据库__redis
01-安装与配置.txt
...
默认的端口号
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
6379



第[66]题_02-爬虫__解析库
01-xpath解析.txt
...
获取标签内容为：下一页> 的a标签，取它的href值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//a[text()="下一页>"]/@href



第[67]题_01-数据库__mongodb
03-查询.txt
...
自定义查询，使用js语句来查
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
find({
	$where:function(){
		return this.age>19
	}
})
例子：
查找班级名称为python02的
db.colc.find({
	$where:function(){
		return this.classname == "python02"
	}
})
查找年龄小于19岁的
db.colc.find({
	$where:function(){
		return this.age < 19 
	}
})
关键点：
查询条件字典中以
$where 为键
值是一个js的匿名函数
只需要函数return 一个布尔值即可
如果布尔的结果为true 那么该行数据会被显示
通常在匿函中的this代表了当前数据行对象



第[68]题_01-数据库__mongodb
01-增删改查.txt
...
删除集合
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.tbtwo.drop()
true



第[69]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[70]题_01-数据库__mongodb
01-增删改查.txt
...
使用数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
use 数据库名称
例子：
use one
> use one
switched to db one



