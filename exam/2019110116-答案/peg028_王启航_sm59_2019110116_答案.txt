
第[1]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
模板过滤器的使用格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{{ 模块变量 | 过滤器:参数 }}
说明：
关于参数
有的过滤器是不带参数的
如果有参数，最多只会接收一个参数



第[2]题_03-django__04-dj2vdo
191024模板.txt
...
模板反向解析-带关键词参数的情况
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% url '别名' 参数名1=值1 参数名n=值n %}
例子：
{% url 'detail' book_id=1 %}
说明：
path('book/detail/<book_id>/', views.book_detail, name='detail')
别名detail对应的路径需要一个参数
所以在反向解析时要传递过去
模板中反解 {% url 'detail' book_id=1 %}
会得到这样的结果  'book/detail/1/'
视图中反解 reverse("detail", kwargs = {"book_id":1})
会得到这样的结果  'book/detail/1/'



第[3]题_06-前端__html
02-基本标签.txt
...
标题标签的使用
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
默认效果：
加粗
额外效果：
爬虫识别页面时，知道这个是重点
例子：
<h1>这是一级标题</h1>
<h2>这是二级标题</h2>
<h3>这是三级标题</h3>



第[4]题_01-数据库__mongodb
05-索引.txt
...
创建一个唯一索引
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子
> db.stu.ensureIndex({name:1},{unique:true})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
应用：
可以通过创建一个唯一索引的方式
来约束字段，不允许重复



第[5]题_06-前端__css
04-选择器.txt
...
标签选择器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
标签选择器，此种选择器影响范围大，建议尽量应用在层级选择器中。
例子：
*{margin:0;padding:0}
div{color:red}   
<div>....</div>   <!-- 对应以上两条样式 -->
<div class="box">....</div>   <!-- 对应以上两条样式 -->



第[6]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
truncatechars过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ value| truncatechars:n }}
效果：
保留n位字符的显示
其中最后一位的显示是...
单词：
truncate，截短缩短



第[7]题_01-数据库__mongodb
05-索引.txt
...
创建一个联合唯一索引
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.ensureIndex({字段1：1， 字段2：1})
例子：按照姓名与图片名称建立联合唯一索引
db.stu.ensureIndex({name:1, bname:1})



第[8]题_06-前端__html
03-列表.txt
...
有序列表标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
<ol>
    <li>列表文字一</li>
    <li>列表文字二</li>
    <li>列表文字三</li>
</ol>
说明：
在网页上生成的列表，每条项目上会按1、2、3编号，有序列表在实际开发中较少使用。



第[9]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
查找
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
查找一条数据：
res = 集合对象.find_one({"name":"qq"})
查找多条数据：
res = 集合对象.find({"gender":True})



第[10]题_06-前端__html
02-基本标签.txt
...
超链接标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
<a href="2.html" target="_blank">测试页面2</a>
说明：
<a>标签可以在网页上定义一个链接地址，它的常用属性有：
href属性 定义跳转的地址
title属性 定义鼠标悬停时弹出的提示文字框
target属性 定义链接窗口打开的位置
target="_self" 缺省值，新页面替换原来的页面，在原来位置打开
target="_blank" 新页面会在新开的一个浏览器窗口打开



第[11]题_01-数据库__mongodb
05-索引.txt
...
创建一个普通索引
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.stu.ensureIndex({name:1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
>



第[12]题_06-前端__html
02-基本标签.txt
...
换行标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
标签：
<br>
或者
<br />



第[13]题_06-前端__css
03-颜色表示.txt
...
css颜色值主要有三种表示方法
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1、颜色名表示，比如：red 红色，gold 金色
2、rgb表示，比如：rgb(255,0,0)表示红色
3、16进制数值表示，比如：#ff0000 表示红色，这种可以简写成 #f00



第[14]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
线程类的定义与启动
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
自定义一个类
让该类继承threading.Thread
同时在自定义类中重写run方法
就可
例子：
class Drawing(threading.Thread):
    def run(self):
        for x in range(3):
            print('正在绘制图片', x)
            time.sleep(1)
》线程类实例化为一个对象并运行：
t2 = Drawing()
t2.start()



第[15]题_02-爬虫__scrapy爬虫
02-配置.txt
...
不尊守爬虫协议
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
ROBOTSTXT_OBEY = False



第[16]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[17]题_06-前端__html
01-html基本.txt
...
meta标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
定义网页基本信息的标签
例如
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="keywords" content="python 人工智能">
    <meta name="description" content="网站描述">



第[18]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
cut过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|cut:目标字符串 }}
效果：
把目标字符串从数据中去掉
例如：
{{ 'hello python'|cut:' '}}
效果
hellopython



第[19]题_06-前端__css
01-基本.txt
...
注释
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
/*
    css注释 ctrl+shift+"/"
*/



第[20]题_06-前端__css
04-选择器.txt
...
组选择器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
多个选择器，如果有同样的样式设置，可以使用组选择器。
.box1,.box2,.box3{width:100px;height:100px}
.box1{background:red}
.box2{background:pink}
.box2{background:gold}



第[21]题_04-版本控制__02-github
01-操作.txt
...
本地仓库与远程仓库产生一个关联
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
git remote add origin 路径ssh的
例子：
git remote add origin git@github.com:ifubing/py1021.git



第[22]题_03-django__04-dj2vdo
191024模板.txt
...
模板中的反向解析，url基本用法
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法，两种情况：
{% url '别名' %}
{% url '命名空间:别名' %}
例子：
路由文件中
path('book/detail/', views.book_detail, name='detail')
在模板中可以通过
{% url 'detail' %} 
拿到值
book/detail
在视图函数中可以通过
reverse('detail') 
拿到值
book/detail



第[23]题_02-爬虫__scrapy爬虫
01-入门.txt
...
创建项目
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scrapy startproject 项目名称
例子：
scrapy startproject xiaoshuo
效果：
会在当前目录创建一个目录



第[24]题_06-前端__css
04-选择器.txt
...
类选择器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
通过类名来选择元素，一个类可应用于多个元素，一个元素上也可以使用多个类，应用灵活，可复用，是css中应用最多的一种选择器。
.red{color:red}
.big{font-size:20px}
.mt10{margin-top:10px} 
<div class="red">....</div>
<h1 class="red big mt10">....</h1>
<p class="red mt10">....</p>



第[25]题_03-django__02-模板
01-过滤器.txt
...
自定义过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，任意app下创建一个包
名称必需为
templatetags
二，在包下新建一个py文件，名字随便，开始写功能
例子如下：
#1 固定写法 导入模块
from django import template
#2 固定写法 实例化对象
register = template.Library()
#3 写过滤器同时注册该过滤器
@register.filter
def addString(value):
    return value+"good"
三，确保app已注册
四，模板中使用。1，先导入。2，再使用。
{% load my_filter %}
{{ "张三"|addString}}


第[26]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
length过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|length }}
效果
获取数据的长度



第[27]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
first与last过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|first }}
{{ 数据|last }}
效果：
first用于拿到数据中第一个成员
last用于拿到数据中最后一个成员



第[28]题_06-前端__html
01-html基本.txt
...
html的基本结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<!DOCTYPE html>
<html lang="en">
    <head>            
        <meta charset="UTF-8">
        <title>网页标题</title>
    </head>
    <body>
          网页显示内容
    </body>
</html>



第[29]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-全列插入
全部字段的值都插入
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名 values(值1，值n)
例子：
insert into student values(0, 'pyhui',18);



第[30]题_04-版本控制__02-github
01-操作.txt
...
本地仓库推送到网上
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
git push -u origin
例子：
git push -u origin



第[31]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[32]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
fun(*args,**kwargs)中的*args,**kwargs什么意思？
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
*args和**kwargs主要用于函数定义。你可以将不定数量的参数传递给一个函数。这里的不定的意思是:预先并不知道,函数使用者会传递多少个参数给你所以在这个场景下使用这两个关键字。
*args是 用来发送一个非键值对的可变数量的参 数列表给一个函数
**kwargs允许你将不定长度的键值对，作为参数传递给一个函数。



第[33]题_06-前端__html
02-基本标签.txt
...
删除标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<s>删除线</s>



第[34]题_06-前端__html
01-html基本.txt
...
特效标签脚本标签
放javascript代码的标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
两个效果
1，加载其它js文件
<script src="js路径"></script>
2，直接在里面写代码
<script>样式</script>



第[35]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
删除虚拟环境
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
rmvirtualenv 环境名称



第[36]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
safe过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|safe }}
效果：
value的代码会被浏览器解析
如果是html代码会生成标签
如果是js代码会执行
对于用户提交的数据不要用saft过滤器



第[37]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
lower与upper过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|lower }}
效果：
把数据全部变为小写
例子：
{{ value|upper}}
效果：
把数据全部转变为大写



第[38]题_06-前端__css
01-基本.txt
...
定义样式的语法格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
选择器 { 属性:值; 属性:值; 属性:值;}
例子：
div{ 
    width:100px; 
    height:100px; 
    color:red 
}



第[39]题_02-爬虫__scrapy爬虫
01-入门.txt
...
发起下一页的请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
思路：
1，拿到下一页的完整路径
2，yield scrapy.Request(下一页的路径, callback=解析方法)



第[40]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
如果存在，修改
如果不存在，新增
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.colc.save({_id:100,"name":"ww"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>  



第[41]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
插入数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》插入一条数据
例子：
res = 集合对象.insert_one({"name":"悟空2", "age":500, "skill":"龟派气功"})
》插入多条数据
例子：
集合对象.insert_many(列表包字典)



第[42]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
修改
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》修改一条
集合对象.update_one({条件字典})
》修改多条
集合对象.update_many({条件字典})
例子：
res = 集合对象.update_many({"gender":True},{"$set":{"skill":"无言"}})



第[43]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
striptags过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|striptags}}
效果：
会删掉value中的html标签
让内容变为纯文本



第[44]题_01-数据库__mysql
02-数据库操作.txt
...
创建数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
create database 数据库名 charset=utf8;
例子：
create database pyhui charset=utf8;



第[45]题_01-数据库__redis
04-string数据类型.txt
...
获取classname对应的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> get classname



第[46]题_06-前端__html
02-基本标签.txt
...
图象标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子
<img src="images/pic.jpg" alt="产品图片" title="鸣人"/>
说明：
<img>标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有：
src属性 定义图片的引用地址
alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。
title属性，鼠标移动到图片上时显示的文字



第[47]题_06-前端__css
02-文本样式.txt
...
02-文本样式.txt...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：



第[48]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
default过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|default:默认值}}
例子：
{{ value|default:"无数据" }}
效果：
如果数据为空时，显示：右边的内容
空列表空字符串空字典等等



第[49]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
floatformat过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：2种情况
{{ 数据|floatformat }}
{{ 数据|floatformat:n }}
例子：
{{ "123.456"|floatformat }}
结果为 123.5
{{ "123.00"|floatformat }}
结果为 123
{{ "123.4567"|floatformat:2 }}
结果为123.46



第[50]题_06-前端__html
01-html基本.txt
...
样式标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
样式代码写在这里
<style>
样式代码写这里
</style>



第[51]题_03-django__04-dj2vdo
191024模板.txt
...
{% with persons.0 as zs %}
<p> {{ zs }} </p>
{% endwith %}
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：



第[52]题_06-前端__html
02-基本标签.txt
...
字符实体
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
空格， &nbsp;
<， &lt;
>， &gt;



第[53]题_06-前端__html
04-表单.txt
...
input控件的各种类型
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
<input type="类型">
例子：
<input type="text">
分类：
type="text" 定义单行文本输入框
type="password" 定义密码输入框
type="radio" 定义单选框
type="checkbox" 定义复选框
type="file" 定义上传文件
type="submit" 定义提交按钮
type="reset" 定义重置按钮
type="button" 定义一个普通按钮
type="image" 定义图片作为提交按钮，用src属性定义图片地址
type="hidden" 定义一个隐藏的表单域，用来存储值
value属性 定义表单元素的值
name属性 定义表单元素的名称，此名称是提交数据时的键名



第[54]题_06-前端__css
05-盒子模型.txt
...
边框
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》可以具体的设置：
border-top-color:red;    /* 设置顶部边框颜色为红色 */  
border-top-width:10px;   /* 设置顶部边框粗细为10px */   
border-top-style:solid;  /* 设置顶部边框的线性为实线，常用的有：solid(实线)  dashed(虚线)  dotted(点线); */
》连写
设置上边框
border-top:10px solid red;
设置上下左右边框
border:10px solid red;



第[55]题_06-前端__css
05-盒子模型.txt
...
内间距与外间距
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》
内间距 padding
外间距 margin
》具体的设置，以内间距为例（外间距同理，换个单词就可以）
padding-top：20px;     /* 设置顶部内间距20px */ 
padding-left:30px;     /* 设置左边内间距30px */ 
padding-right:40px;    /* 设置右边内间距40px */ 
padding-bottom:50px;   /* 设置底部内间距50px */
》连写设置
有多种写法，详情如下：
padding：20px 40px 50px 30px; /* 四个值按照顺时针方向，分别设置的是 上 右 下 左  
padding：20px 40px 50px; /* 设置顶部内边距为20px，左右内边距为40px，底部内边距为50px */ 
padding：20px 40px; /* 设置上下内边距为20px，左右内边距为40px*/ 
padding：20px; /* 设置四边内边距为20px */



第[56]题_06-前端__html
01-html基本.txt
...
注释
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<!-- 注释内容写在这里 -->



第[57]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前数据库中的全部集合（全部数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> show collections
spider
stu
tbtwo
>



第[58]题_02-爬虫__scrapy爬虫
01-入门.txt
...
爬虫项目运行
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scrapy crawl 爬虫名称
例子：
scrapy crawl qidian



第[59]题_01-数据库__mongodb
01-增删改查.txt
...
删除集合
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db.tbtwo.drop()
true



第[60]题_01-数据库__mongodb
05-索引.txt
...
查看当前集合的索引
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.getIndexes()
例子：
> db.stu.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "dbtwo.stu"
        }
]
>



第[61]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
slice过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
效果：
切片的效果
格式：
{{ 变量|slice:"起始索引：终止索引：步长" }}
例子：
{{ 变量|slice:"2:6" }}



第[62]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
队列中的等待
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
队列.join()
可以让任务没有完成的队列，阻塞



第[63]题_06-前端__html
05-表格.txt
...
表格的基本格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<table>
    <thead>
    <tr><th>序号</th><th>姓名</th></tr>
    </thead>
    <tbody>
    <tr><td>1</td><td>张三</td></tr>
    </tbody>
</table>
说明：table的属性
border属性 定义表格的边框，设置值是数值
cellpadding属性 定义单元格内容与边框的距离，设置值是数值
cellspacing属性 定义单元格与单元格之间的距离，设置值是数值
align属性 设置整体表格相对于浏览器窗口的水平对齐方式,设置值有：left | center | right
说明：tr代表一行，td和th代表单元格
<tr>标签：定义表格中的一行
<td>和<th>标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格，
<thead>标签，代表表头
<tbody>标签，代表了表格的主体
注意：单元格的属性
align 设置单元格中内容的水平对齐方式,设置值有：left | center | right
valign 设置单元格中内容的垂直对齐方式 top | middle | bottom
colspan 设置单元格水平合并，设置值是数值
rowspan 设置单元格垂直合并，设置值是数值



第[64]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
删除
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
功能：
可以删除一个，或者删除多个
格式：
集合对象.delete_one（条件字典）
集合对象.delete_many(条件字典)



第[65]题_01-数据库__mongodb
04-聚合.txt
...
显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：不显示_id字段，只显示name字段
> db.one.aggregate({$project:{_id:0, name:1}})
{ "name" : "张三" }
{ "name" : "李四" }
{ "name" : "赵强" }
>  



第[66]题_06-前端__html
02-基本标签.txt
...
加粗标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<b>加粗</b>



第[67]题_06-前端__html
04-表单.txt
...
下拉框
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子
    <select name="place" id="">
        <option value="1">武汉</option>
        <option value="2">长沙</option>
    </select>



第[68]题_06-前端__css
01-基本.txt
...
三种使用方式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1、外联式：通过link标签，链接到外部样式表到页面中。
<link rel="stylesheet" type="text/css" href="css/main.css">
2、嵌入式：通过style标签，在网页上创建嵌入的样式表。
<style type="text/css">
    div{ width:100px; height:100px; color:red }
    ......
</style>
3、内联式：通过标签的style属性，在标签上直接写样式。
<div style="width:100px; height:100px; color:red ">......</div>



第[69]题_01-数据库__mongodb
03-查询.txt
...
比较运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号有：
等于，年龄等于18  ｛age:18｝
小于，$lt， less than  比如，年龄小于18 {age:{$lt:18}}
大于，$gt,  greater than
小于等于，$lte  less than equal
大于等于，$gte
不等于， $ne   
例子：
db.colc.find({age:{$gt:19}})



第[70]题_03-django__04-dj2vdo
191024视图.txt
...
视图给模板传递参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
render(request, 模板名, 字典)



