
第[1]题_02-爬虫__解析库
02-python操作xpath.txt
...
安装lxml
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
pip install lxml



第[2]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
队列中的等待
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
队列.join()
可以让任务没有完成的队列，阻塞



第[3]题_01-数据库__mysql
04-数据行的操作.txt
...
修改数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
update 表名 set 列1=值1，列2=值2 where 条件
例子：
update student set name='赵云',age=23 where id=3;
注意：
一定不要漏了where 条件，否则所有数据都被改掉



第[4]题_01-数据库__redis
06-list数据类型.txt
...
获取lis键中的所有元素
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrange lis 0 -1



第[5]题_04-版本控制__01-git
01-入门.txt
...
暂存区内容添加到版本库中
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
git commit -m '版本说明'



第[6]题_03-django__04-dj2vdo
191022路由url.txt
...
给一个url起一个别名
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
path('login/', views.login, name='login')



第[7]题_01-数据库__redis
09-hash数据类型.txt
...
添加单个哈希字段值对
设置zs键为哈希，存值
字段height 170
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hset 键 字段1 值1
例子：
hset zs height 170



第[8]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
谈下python的GIL
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。
如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。
多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大



第[9]题_06-前端__html
01-html基本.txt
...
样式标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
样式代码写在这里
<style>
样式代码写这里
</style>



第[10]题_02-爬虫__解析库
01-xpath解析.txt
...
获取倒数第二个节点
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
//mon[last()-1]



第[11]题_02-爬虫__解析库
01-xpath解析.txt
...
取notbook标签中name值包含m的标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//notbook[contains(@name,'m')]



第[12]题_06-前端__html
01-html基本.txt
...
载入其它样式文件
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<link rel="stylesheet" href="m.css">



第[13]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-缺省插入
只插入部分字段的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名（字段1，字段n） values(值1，值n);
例子：
insert into student (name) values('ggyy');



第[14]题_03-django__04-dj2vdo
1920211530综合.txt
...
url是统一资源定位符，它的组成结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scheme：//host:port/path/?k1=v1&k2=v2#anchor
详解：
scheme，协议
host，主机名
port，端口号
path，路径
k1=v1&k2=v2，get参数



第[15]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前全部的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
两种查询办法：
> show databases
> show dbs



第[16]题_01-数据库__redis
04-string数据类型.txt
...
设置classname的值为python01
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> set classname python01



第[17]题_04-版本控制__02-github
01-操作.txt
...
本地仓库推送到网上
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
git push -u origin
例子：
git push -u origin



第[18]题_01-数据库__mongodb
03-查询.txt
...
自定义查询，使用js语句来查
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
find({
	$where:function(){
		return this.age>19
	}
})
例子：
查找班级名称为python02的
db.colc.find({
	$where:function(){
		return this.classname == "python02"
	}
})
查找年龄小于19岁的
db.colc.find({
	$where:function(){
		return this.age < 19 
	}
})
关键点：
查询条件字典中以
$where 为键
值是一个js的匿名函数
只需要函数return 一个布尔值即可
如果布尔的结果为true 那么该行数据会被显示
通常在匿函中的this代表了当前数据行对象



第[19]题_01-数据库__mongodb
05-索引.txt
...
查找语句执行状态的查看
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
db.stu.find({name:'tt'}).explain("executionStats")
关注
executionTimeMillis



第[20]题_04-版本控制__01-git
01-入门.txt
...
切换分支
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
$ git checkout 分支名称
例子：
$ git checkout dev



第[21]题_02-爬虫__requests爬虫
01-发起请求.txt
...
使用代理发起请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
request.get(网址，proxies=代理字典)
代理字典的格式：
{"协议"："ip：端口""}
例如：
{"http":"http://12.34.56.01:8000", "https":"https://12.34.56.01:8000"}



第[22]题_06-前端__html
04-表单.txt
...
    ...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：



第[23]题_02-爬虫__解析库
02-python操作xpath.txt
...
导入etree
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
from lxml import etree



第[24]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
add过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子一，两个数字会相加：
{{ "1"|add:"2"}}
得到结果3
例子二，不能相加的字符串就拼接
{{ "1"|add:"2sss" }}
得到结果  12sss
例子三，两个列表相加就是合并
{{ list1 | add : list2 }}



第[25]题_06-前端__html
02-基本标签.txt
...
图象标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子
<img src="images/pic.jpg" alt="产品图片" title="鸣人"/>
说明：
<img>标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有：
src属性 定义图片的引用地址
alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。
title属性，鼠标移动到图片上时显示的文字



第[26]题_01-数据库__mysql
02-数据库操作.txt
...
创建数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
create database 数据库名 charset=utf8;
例子：
create database pyhui charset=utf8;



第[27]题_02-爬虫__requests爬虫
03-经验小结.txt
...
如何解决破解图片验证码
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
使用打码平台
执行给定的代码，打码平台会识别指定路径的图片验证码
并且返回识别后的结果



第[28]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
让当前的线程全部执行完毕后
主线程再进行下一条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
线程对象.join（）
例子：
t.join()



第[29]题_05-linux__01-压缩与解压缩.txt
01-操作.txt
...
bzip2压缩文件，同时要保留文件
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
bzip2 - k 文件1 文件n



第[30]题_02-爬虫__scrapy爬虫
01-入门.txt
...
创建爬虫
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scrapy genspider 爬虫名称 允许访问的域名
例子：
scrapy genspider qidian www.qidian.com
注意：
要先cd到项目目录中
然后再创建爬虫
效果：
在spiders目录中新增了一个爬虫名.py



第[31]题_06-前端__html
01-html基本.txt
...
注释
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<!-- 注释内容写在这里 -->



第[32]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
从线程队列中取出数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
代码：
队列.get()
说明：
队列如果是空的，会阻塞
补充：
队列.get(block=False)
队列如果空了，就会报一个错误



第[33]题_01-数据库__redis
07-set数据类型.txt
...
往键s1里添加成员zs ls ww
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> sadd s1 zs ls ww



第[34]题_03-django__02-模板
01-过滤器.txt
...
改变日期显示格式的过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
单词：date
例如：
{{ book.bpub_data|date:'Y年-m月-d日' }}



第[35]题_02-爬虫__scrapy爬虫
01-入门.txt
...
爬虫项目运行
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scrapy crawl 爬虫名称
例子：
scrapy crawl qidian



第[36]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
往线程队列中存入数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
代码：
队列.put(数据)
说明：
如果队列满了，会阻塞
补充：
队列.put(数据，block=False)
队列如果满了，就会报一个错误



第[37]题_02-爬虫__requests爬虫
02-响应的属性与方法.txt
...
获取响应对象的默认解码格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
响应对象.encoding



第[38]题_06-前端__html
01-html基本.txt
...
meta标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
定义网页基本信息的标签
例如
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="keywords" content="python 人工智能">
    <meta name="description" content="网站描述">



第[39]题_02-爬虫__解析库
02-python操作xpath.txt
...
xpath的使用套招
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，实例化生成一个element对象
from lxml import etree
obj = etree.HTML(字符串html内容)
二，对象.xpath（xpath表达式)
res = obj.xpath(表达式)
# res是一个列表，如果列表成员仍然是element对象，他们仍可以使用xpath方法


第[40]题_01-数据库__mysql
05-查询.txt
...
having与where的区别
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
having对分组后的结果进行过滤
where对原始的查询数据进行过滤
where能做的having都能够做，having功能更加，但是过滤的性能弱一些



第[41]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
python实现列表去重的方法（先通过集合去重，在转列表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
li=[1,2,2,3,3]
a=set(li)
print (list(a))　



第[42]题_01-数据库__redis
06-list数据类型.txt
...
从右侧插入数据
往lis键右侧插入数据 
a4  
a5
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> rpush lis a4 a5



第[43]题_01-数据库__mysql
05-查询.txt
...
逻辑运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号：
与 and
或 or
非 not 
例子：
查询id大于3并且gender等于0的
select * from student where id>3 and gender=0;



第[44]题_01-数据库__mongodb
03-查询.txt
...
分页相关知识
1，限定显示几条
2，跳过几条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
limit(n)，显示n条
skip(m)，跳过m条
一般limit与skip同时使用，实现分页效果
例子：
每一页显示两个数据
第一页
db.集合名.find().skip(0).limit(2)
第二页
db.集合名.find().skip(2).limit(2)
第三页
db.集合名.find().skip(4).limit(2)
第四页
db.集合名.find().skip(6).limit(2)
（当前页码-1）*每页显示几个数据
第n页
db.集合名.find().skip((n-1)*2)



第[45]题_06-前端__css
04-选择器.txt
...
ID选择器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
通过id名来选择元素，元素的id名称不能重复，所以一个样式设置项只能对应于页面上一个元素，不能复用，id名一般给程序使用，所以不推荐使用id作为选择器。
#box{color:red} 
<div id="box">....</div>   <!-- 对应以上一条样式，其它元素不允许应用此样式 -->



第[46]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-全列插入
全部字段的值都插入
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名 values(值1，值n)
例子：
insert into student values(0, 'pyhui',18);



第[47]题_04-版本控制__01-git
01-入门.txt
...
创建分支
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
$ git branch 分支名称
例子：
$ git branch dev



第[48]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
创建一个线程队列队象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
代码：
import queue
q = queue.Queue()
补充：
生成一个容量为6的队列对象
q = queue.Queue(6)



第[49]题_06-前端__html
03-列表.txt
...
有序列表标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
<ol>
    <li>列表文字一</li>
    <li>列表文字二</li>
    <li>列表文字三</li>
</ol>
说明：
在网页上生成的列表，每条项目上会按1、2、3编号，有序列表在实际开发中较少使用。



第[50]题_06-前端__css
04-选择器.txt
...
伪类及伪元素选择器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
常用的伪类选择器有hover，表示鼠标悬浮在元素上时的状态，伪元素选择器有before和after,它们可以通过样式在元素中插入内容。
.box1:hover{color:red}
.box2:before{content:'行首文字';}
.box3:after{content:'行尾文字';}



第[51]题_01-数据库__redis
09-hash数据类型.txt
...
添加多个哈希字段值对
设置ls键为哈希，存多个字段值对
字段height 177
字段weight 66
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hmset 键 字段1 值1 字段n 值n
例子：
hmset ls height 177 weight 66



第[52]题_03-django__04-dj2vdo
10211518虚拟环境.txt
...
退出虚拟环境
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
deactivate



第[53]题_01-数据库__redis
06-python连redis.txt
...
获取string类型的键对应的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
连接对象.get(键)



第[54]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起一个post请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
requests.post(url, params=参数字典)



第[55]题_01-数据库__redis
06-list数据类型.txt
...
lis键中查找a
找到后从左向右删掉2个
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrem lis 2 a



第[56]题_03-django__04-dj2vdo
1920211530综合.txt
...
命令创建django项目
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
django-admin startproject 项目名称
例子：
diango-admin startproject first_project
效果：
会在当前目录下创建一个目录，名称是项目名



第[57]题_01-数据库__mysql
05-查询.txt
...
分组与对已分的组进行过滤
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
group by 列 having 条件
意义：
对某一个列进行分组，同时按照某个条件对组进行过滤
例子：
select gender,count(*) from student group by gender having gender is not null;



第[58]题_01-数据库__redis
04-string数据类型.txt
...
获取classname对应的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> get classname



第[59]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[60]题_02-爬虫__scrapy爬虫
01-入门.txt
...
安装scrapy
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
pip install scrapy



第[61]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-插入多条数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名（字段1，字段n） values(值1，值n)，(值1，值n);
例子：
insert into student(name) values('cat'), ('dog'),('mie');
说明：
括号，括号，括号
这样的方式传多个值



第[62]题_01-数据库__mongodb
03-查询.txt
...
逻辑运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
与，｛键1：值1， 键2：值2｝ 
或， ｛$or：[{},{}]｝
例子：
找年龄为19岁或者班级为java班的数据
db.colc.find({$or:[{age:19},{classname:"java"}]})
找年龄大于16岁或者班级为java班的数据
db.colc.find({$or:[{age:{$gt:16}},{classname:"java"}]})



第[63]题_02-爬虫__scrapy爬虫
01-入门.txt
...
发起下一页的请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
思路：
1，拿到下一页的完整路径
2，yield scrapy.Request(下一页的路径, callback=解析方法)



第[64]题_03-django__04-dj2vdo
1920211530综合.txt
...
DEBUG模式的功能
位于settings.py中的DEBUG的功能
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1，开启后修改django代码并保存后，服务器会重启
2，如果项目中出现了错误，会在浏览器与控制台打印错误
3，上线以后需要设置把DEBUG=False
4，如果 DEBUG设置为False，必需设置ALLOWED_HOSTS



第[65]题_02-爬虫__scrapy爬虫
01-入门.txt
...
创建项目
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scrapy startproject 项目名称
例子：
scrapy startproject xiaoshuo
效果：
会在当前目录创建一个目录



第[66]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
队列中计数器减一
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
队列.task_done()
补充：
一般与队列等待共同使用



第[67]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[68]题_01-数据库__mysql
03-数据表的操作.txt
...
重命名表名
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
rename table 原表名 to 新表名
例子：
rename table student to pistudent;



第[69]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
default_if_none过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|default_if_none:默认值}}
例子：
{{ value|default_if_none:"我是默认值" }}
效果：
当数据仅仅为none的时候，才会显示默认值
如果数据为空列表时，显示 []
数据为空字典时，显示 {}



第[70]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
fun(*args,**kwargs)中的*args,**kwargs什么意思？
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
*args和**kwargs主要用于函数定义。你可以将不定数量的参数传递给一个函数。这里的不定的意思是:预先并不知道,函数使用者会传递多少个参数给你所以在这个场景下使用这两个关键字。
*args是 用来发送一个非键值对的可变数量的参 数列表给一个函数
**kwargs允许你将不定长度的键值对，作为参数传递给一个函数。



