
第[1]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前正在使用的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
> db
one



第[2]题_01-数据库__mongodb
04-聚合.txt
...
分页
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
$limit：隠定显示条目数
$skip：跳过条目数
例子：限定只显示两条数据
> db.one.aggregate({$limit:2})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
例子：跳过一条数据
> db.one.aggregate({$skip:1})
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }



第[3]题_01-数据库__mongodb
03-查询.txt
...
统计查询结果的数量
两种方式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
方式一
db.集合名称.find(条件).count()
方式二
db.集合名称.count(条件)
例子：
查询年龄小于60的数据条目数
db.colc.find({age:{$lt:60}}).count()
db.colc.count({age:{$lt:60}})



第[4]题_01-数据库__mongodb
04-聚合.txt
...
显示指定的字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：不显示_id字段，只显示name字段
> db.one.aggregate({$project:{_id:0, name:1}})
{ "name" : "张三" }
{ "name" : "李四" }
{ "name" : "赵强" }
>  



第[5]题_01-数据库__mongodb
01-增删改查.txt
...
使用数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
use 数据库名称
例子：
use one
> use one
switched to db one



第[6]题_06-前端__html
02-基本标签.txt
...
加粗标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<b>加粗</b>



第[7]题_01-数据库__mongodb
04-聚合.txt
...
排序
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：按照年龄进行升序
> db.one.aggregate({$sort:{age:1}})
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
>
例子：按照主键降序显示
> db.one.aggregate({$sort:{_id:-1}})
{ "_id" : ObjectId("5db789c1de8bde057a298e4a"), "name" : "赵强", "age" : 86, "gender" : 1, "class" : "php" }
{ "_id" : ObjectId("5db789aede8bde057a298e49"), "name" : "李四", "age" : 38, "gender" : 0, "class" : "python" }
{ "_id" : ObjectId("5db7896dde8bde057a298e48"), "name" : "张三", "age" : 18, "gender" : 1, "class" : "python" }
>



第[8]题_03-django__04-dj2vdo
191024模板.txt
...
模板反向解析-带关键词参数的情况
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% url '别名' 参数名1=值1 参数名n=值n %}
例子：
{% url 'detail' book_id=1 %}
说明：
path('book/detail/<book_id>/', views.book_detail, name='detail')
别名detail对应的路径需要一个参数
所以在反向解析时要传递过去
模板中反解 {% url 'detail' book_id=1 %}
会得到这样的结果  'book/detail/1/'
视图中反解 reverse("detail", kwargs = {"book_id":1})
会得到这样的结果  'book/detail/1/'



第[9]题_01-数据库__mongodb
03-查询.txt
...
自定义查询，使用js语句来查
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
find({
	$where:function(){
		return this.age>19
	}
})
例子：
查找班级名称为python02的
db.colc.find({
	$where:function(){
		return this.classname == "python02"
	}
})
查找年龄小于19岁的
db.colc.find({
	$where:function(){
		return this.age < 19 
	}
})
关键点：
查询条件字典中以
$where 为键
值是一个js的匿名函数
只需要函数return 一个布尔值即可
如果布尔的结果为true 那么该行数据会被显示
通常在匿函中的this代表了当前数据行对象



第[10]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
队列中计数器减一
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
队列.task_done()
补充：
一般与队列等待共同使用



第[11]题_03-django__04-dj2vdo
191024模板.txt
...
for遍历，逆序遍历
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% for 临时变量 in 容器 reversed %}
临时变量
{% endfor %}



第[12]题_01-数据库__mongodb
01-增删改查.txt
...
创建集合（集合就是数据表）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：创建一个名籽tbtwo的集合
> db.createCollection("tbtwo")
{ "ok" : 1 }



第[13]题_01-数据库__mongodb
03-查询.txt
...
查询所有
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find()



第[14]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
default过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|default:默认值}}
例子：
{{ value|default:"无数据" }}
效果：
如果数据为空时，显示：右边的内容
空列表空字符串空字典等等



第[15]题_01-数据库__mongodb
02-数据行的操作.txt
...
删除数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
》删除多个
db.集合名称.remove(条件)
》删除一个
db.集合名称.remove(条件,{justOne:true})



第[16]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
safe过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|safe }}
效果：
value的代码会被浏览器解析
如果是html代码会生成标签
如果是js代码会执行
对于用户提交的数据不要用saft过滤器



第[17]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
first与last过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|first }}
{{ 数据|last }}
效果：
first用于拿到数据中第一个成员
last用于拿到数据中最后一个成员



第[18]题_01-数据库__mongodb
03-查询.txt
...
去重
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.distinct(去重的字段)
例子：
查询所有的班级名称
db.colc.distinct("classname")
找出年龄大于17岁的，班级名称
db.colc.distinct("classname", {age:{$gt:17}})



第[19]题_06-前端__html
02-基本标签.txt
...
字符实体
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
空格， &nbsp;
<， &lt;
>， &gt;



第[20]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
修改
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》修改一条
集合对象.update_one({条件字典})
》修改多条
集合对象.update_many({条件字典})
例子：
res = 集合对象.update_many({"gender":True},{"$set":{"skill":"无言"}})



第[21]题_06-前端__html
02-基本标签.txt
...
图象标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子
<img src="images/pic.jpg" alt="产品图片" title="鸣人"/>
说明：
<img>标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有：
src属性 定义图片的引用地址
alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。
title属性，鼠标移动到图片上时显示的文字



第[22]题_01-数据库__mongodb
03-查询.txt
...
逻辑运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
与，｛键1：值1， 键2：值2｝ 
或， ｛$or：[{},{}]｝
例子：
找年龄为19岁或者班级为java班的数据
db.colc.find({$or:[{age:19},{classname:"java"}]})
找年龄大于16岁或者班级为java班的数据
db.colc.find({$or:[{age:{$gt:16}},{classname:"java"}]})



第[23]题_01-数据库__mongodb
03-查询.txt
...
比较运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
符号有：
等于，年龄等于18  ｛age:18｝
小于，$lt， less than  比如，年龄小于18 {age:{$lt:18}}
大于，$gt,  greater than
小于等于，$lte  less than equal
大于等于，$gte
不等于， $ne   
例子：
db.colc.find({age:{$gt:19}})



第[24]题_03-django__04-dj2vdo
191024模板.txt
...
高级模板变量取值与方法的调用
模板变量为列表，字典时，如何取成员
模板变量为对象时，如何调方法
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
取值规则：
通过点来取值，例如：
字典.键， 列表.索引， 对象.属性取值
调方法规则：
模板变量.方法名  
注意，方法名后不用加括号
例如：
模板变量 stu_list 是一个列表，取列表的2号位
{{ stu_list.2 }}
例如：
模板变量 user 是一个对象，取它的name属性值
{{ user.name }}



第[25]题_06-前端__html
04-表单.txt
...
下拉框
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子
    <select name="place" id="">
        <option value="1">武汉</option>
        <option value="2">长沙</option>
    </select>



第[26]题_03-django__04-dj2vdo
191024视图.txt
...
视图给模板传递参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
render(request, 模板名, 字典)



第[27]题_06-前端__html
04-表单.txt
...
表单标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
<form action="" method="get" enctype="multipart/form-data"></form>
说明：
如果数据需要提交到某个网址需要使用表单标签



第[28]题_06-前端__html
02-基本标签.txt
...
标题标签的使用
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
默认效果：
加粗
额外效果：
爬虫识别页面时，知道这个是重点
例子：
<h1>这是一级标题</h1>
<h2>这是二级标题</h2>
<h3>这是三级标题</h3>



第[29]题_06-前端__html
03-列表.txt
...
定义列表标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
<dl>
    <dt>html</dt>
    <dd>负责页面的结构</dd>
    <dt>css</dt>
    <dd>负责页面的表现</dd>
    <dt>javascript</dt>
    <dd>负责页面的行为</dd>
</dl>
说明：
定义列表通常用于术语的定义。<dl>标签表示列表的整体。<dt>标签定义术语的题目。<dd>标签是术语的解释。一个<dl>中可以有多个题目和解释，



第[30]题_01-数据库__mongodb
02-数据行的操作.txt
...
添加数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.insert(字典)
例子：
> db.cola.insert({"name":"zs", "age":18})
WriteResult({ "nInserted" : 1 })
注意：
关于集合名称，如果操作的是一个不存在的集合
mongo会自动创建



第[31]题_06-前端__html
01-html基本.txt
...
meta标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
定义网页基本信息的标签
例如
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="keywords" content="python 人工智能">
    <meta name="description" content="网站描述">



第[32]题_01-数据库__mongodb
05-索引.txt
...
创建一个联合唯一索引
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.ensureIndex({字段1：1， 字段2：1})
例子：按照姓名与图片名称建立联合唯一索引
db.stu.ensureIndex({name:1, bname:1})



第[33]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
length过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|length }}
效果
获取数据的长度



第[34]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
插入数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》插入一条数据
例子：
res = 集合对象.insert_one({"name":"悟空2", "age":500, "skill":"龟派气功"})
》插入多条数据
例子：
集合对象.insert_many(列表包字典)



第[35]题_03-django__04-dj2vdo
191024模板.txt
...
开始行与结束行的判断
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》判断是否是开始行
forloop.first
》判断是否是结束行
forloop.last
》例子
{% for book in books %}
{% if forloop.first %}
代码一
{% elif forloop.last %}
代码二
｛% endif %}
{% endfor %}
》说明
一般会与if判断一起使用



第[36]题_06-前端__html
02-基本标签.txt
...
斜体标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<i>斜体</i>



第[37]题_06-前端__html
04-表单.txt
...
多行文本输入框
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
    <textarea name="" id="" cols="30" rows="10">内容区</textarea>



第[38]题_03-django__04-dj2vdo
191024模板.txt
...
字典遍历，同时得到键与值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{% for key, val in persion.items %}
key--val
{% endfor %}



第[39]题_02-爬虫__scrapy爬虫
02-配置.txt
...
不尊守爬虫协议
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
ROBOTSTXT_OBEY = False



第[40]题_06-前端__html
02-基本标签.txt
...
删除标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<s>删除线</s>



第[41]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
线程锁的定义与使用
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
定义
import threading
生成线程锁对象
锁对象 = threading.Lock()
上锁
锁对象.acquire()
解锁
锁对象.release()



第[42]题_02-爬虫__scrapy爬虫
01-入门.txt
...
创建爬虫
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scrapy genspider 爬虫名称 允许访问的域名
例子：
scrapy genspider qidian www.qidian.com
注意：
要先cd到项目目录中
然后再创建爬虫
效果：
在spiders目录中新增了一个爬虫名.py



第[43]题_03-django__04-dj2vdo
191024模板.txt
...
常用的数据取别名
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式一：
{% with 别名=数据 %}
{{ 别名 }}
{% endwith %}
格式二：
{% with 数据 as 别名 %}
{{ 别名 }}
{% endwith %}
例子：
{% with zs = persons.0 %}
<p> {{ zs }} </p>
{% endwith %}



第[44]题_02-爬虫__scrapy爬虫
01-入门.txt
...
安装scrapy
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
pip install scrapy



第[45]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
队列中的等待
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
队列.join()
可以让任务没有完成的队列，阻塞



第[46]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
random过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|random }}
效果：
从value中随机出一个来



第[47]题_03-django__04-dj2vdo
191024模板.txt
...
模板中的反向解析，url基本用法
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法，两种情况：
{% url '别名' %}
{% url '命名空间:别名' %}
例子：
路由文件中
path('book/detail/', views.book_detail, name='detail')
在模板中可以通过
{% url 'detail' %} 
拿到值
book/detail
在视图函数中可以通过
reverse('detail') 
拿到值
book/detail



第[48]题_06-前端__html
01-html基本.txt
...
样式标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
样式代码写在这里
<style>
样式代码写这里
</style>



第[49]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
删除
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
功能：
可以删除一个，或者删除多个
格式：
集合对象.delete_one（条件字典）
集合对象.delete_many(条件字典)



第[50]题_01-数据库__mongodb
05-索引.txt
...
查看当前集合的索引
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名.getIndexes()
例子：
> db.stu.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "dbtwo.stu"
        }
]
>



第[51]题_03-django__04-dj2vdo
191024模板.txt
...
去除html标签中的空白字符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% spaceless %}
html代码
{% endspaceless %}
效果：
会把html代码中的空白，换行等符号去掉，最后形成一行
单词解释：
space，空格
less，减少



第[52]题_01-数据库__mongodb
03-查询.txt
...
分页相关知识
1，限定显示几条
2，跳过几条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
limit(n)，显示n条
skip(m)，跳过m条
一般limit与skip同时使用，实现分页效果
例子：
每一页显示两个数据
第一页
db.集合名.find().skip(0).limit(2)
第二页
db.集合名.find().skip(2).limit(2)
第三页
db.集合名.find().skip(4).limit(2)
第四页
db.集合名.find().skip(6).limit(2)
（当前页码-1）*每页显示几个数据
第n页
db.集合名.find().skip((n-1)*2)



第[53]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
让当前的线程全部执行完毕后
主线程再进行下一条
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
线程对象.join（）
例子：
t.join()



第[54]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
获取当前线程的对象
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
threading.current_thread()



第[55]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
模板过滤器的使用格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{{ 模块变量 | 过滤器:参数 }}
说明：
关于参数
有的过滤器是不带参数的
如果有参数，最多只会接收一个参数



第[56]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
lower与upper过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|lower }}
效果：
把数据全部变为小写
例子：
{{ value|upper}}
效果：
把数据全部转变为大写



第[57]题_03-django__04-dj2vdo
191024视图.txt
...
reverse函数反转-带关键词参数的反转
路由的路径匹配中有关键词捕获时（命名分组的正则表达式）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
reverse（别名，kwargs=｛关键词1：值1，关键词2：值2｝)
例子：
detail_url= reverse("detail", kwargs={"article_id":16})
效果：会反向生成别名为detail的路径，同时把article_id的数据拼到对应的位置



第[58]题_03-django__04-dj2vdo
191024视图.txt
...
reverse函数反转路径-不带参数的反转
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》使用前记得确保导入了
from django.shortcuts import reverse
》格式
reverse(“命名空间：别名”）
reverse（“别名”）



第[59]题_03-django__04-dj2vdo
191024模板.txt
...
for循环中的变量，显示序号-反向显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
forloop.revcounter
。
例子格式：
{% for 变量 in 容器 %}
序号：{{ forloop.revcounter }}
变量
{% endfor %}
》
计数以0结束
revcounter0



第[60]题_02-爬虫__解析库
01-xpath解析.txt
...
获取标签内容为：下一页> 的a标签，取它的href值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//a[text()="下一页>"]/@href



第[61]题_03-django__04-dj2vdo
1920211530综合.txt
...
url是统一资源定位符，它的组成结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scheme：//host:port/path/?k1=v1&k2=v2#anchor
详解：
scheme，协议
host，主机名
port，端口号
path，路径
k1=v1&k2=v2，get参数



第[62]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
default_if_none过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|default_if_none:默认值}}
例子：
{{ value|default_if_none:"我是默认值" }}
效果：
当数据仅仅为none的时候，才会显示默认值
如果数据为空列表时，显示 []
数据为空字典时，显示 {}



第[63]题_02-爬虫__scrapy爬虫
01-入门.txt
...
创建项目
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
scrapy startproject 项目名称
例子：
scrapy startproject xiaoshuo
效果：
会在当前目录创建一个目录



第[64]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
join过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|join:"/" }}
效果：
value容器的成员以：右边的符号进行连接



第[65]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
谈下python的GIL
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。
如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。
多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大



第[66]题_01-数据库__mongodb
03-查询.txt
...
投影
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
功能：显示期望的字段
用法：
find(条件字典，投影字典)
投影字典的说明：
希望显示的字段，设置为1
如果不希望显示_id，设置它为0
例子：
查询结果中，只显示classname字段的值
db.getCollection('colc').find({},{classname:1})
db.colc.find({},{classname:1})
例子：
查询结果中，只显示classname字段的值，不显示_id的内容
db.getCollection('colc').find({},{classname:1, _id:0})
例子：
查找年龄在79，16岁的数据，只显示name，age
db.colc.find({age:{$in:[79,16]}},{name:1, age:1, _id:0})



第[67]题_01-数据库__mongodb
03-查询.txt
...
一个条件的查找
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.find(条件)



第[68]题_03-django__04-dj2vdo
191024模板.txt
...
{% with persons.0 as zs %}
<p> {{ zs }} </p>
{% endwith %}
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：



第[69]题_01-数据库__mongodb
02-数据行的操作.txt
...
修改数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
db.集合名称.update(查找条件，修改内容，[{multi:true}])
情况一：查到数据，完全修改
例子：这种效果会把查到的结果完全的替代为修改的内容
查找姓名为zs的数据行，把整个数据修改年龄为20
> db.colc.update({name:"zs"},{age:20})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>   
情况二：查到数据，保留修改（只修改指定的字段）
例子，查找班级为python的数据，把年级改为2
> db.colc.update({classname:"python"},{$set:{grade:2}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
格式：
要修改的内容
{$set:{要修改的键：要修改的值}}



第[70]题_06-前端__html
01-html基本.txt
...
html的基本结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<!DOCTYPE html>
<html lang="en">
    <head>            
        <meta charset="UTF-8">
        <title>网页标题</title>
    </head>
    <body>
          网页显示内容
    </body>
</html>



