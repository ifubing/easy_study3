
第[1]题_01-数据库__redis
09-hash数据类型.txt
...
获取一个哈键的所有字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hkeys 键
例如：获取一个键名为zs的哈希数据中所有字段
hkeys zs



第[2]题_03-django__04-dj2vdo
1920211530综合.txt
...
用代码运行一个项目
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
python manage.py runserver
期望它以指定的ip和端口运行
python mange.py runserver IP地址：端口



第[3]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键的所有成员值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrange z1 0 -1



第[4]题_01-数据库__mysql
04-数据行的操作.txt
...
修改数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
update 表名 set 列1=值1，列2=值2 where 条件
例子：
update student set name='赵云',age=23 where id=3;
注意：
一定不要漏了where 条件，否则所有数据都被改掉



第[5]题_04-版本控制__01-git
01-入门.txt
...
版本回退
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，按照版本号回退
格式：
git reset --hard 版本号
例子：
$ git reset --hard d3064f0
二，按照数量回退
方式1：通过^
例子：回退到前两个版本
git reset --hard HEAD^^
方式2：通过~
例子：回退到前50个版本
git reset --hard HEAD~50



第[6]题_01-数据库__redis
08-zset数据类型.txt
...
删除z1键中权值在4到10范围的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zremrangebyscore z1 4 10



第[7]题_03-django__04-dj2vdo
1920211530综合.txt
...
DEBUG模式的功能
位于settings.py中的DEBUG的功能
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
1，开启后修改django代码并保存后，服务器会重启
2，如果项目中出现了错误，会在浏览器与控制台打印错误
3，上线以后需要设置把DEBUG=False
4，如果 DEBUG设置为False，必需设置ALLOWED_HOSTS



第[8]题_01-数据库__mysql
02-数据库操作.txt
...
查看所有的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
show databases;



第[9]题_03-django__04-dj2vdo
191024模板.txt
...
{% with persons.0 as zs %}
<p> {{ zs }} </p>
{% endwith %}
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：



第[10]题_01-数据库__redis
05-键命令.txt
...
设置键name的过期时间为6秒
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> expire name 6



第[11]题_01-数据库__mysql
03-数据表的操作.txt
...
重命名表名
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
rename table 原表名 to 新表名
例子：
rename table student to pistudent;



第[12]题_03-django__04-dj2vdo
191024视图.txt
...
reverse函数反转-带关键词参数的反转
路由的路径匹配中有关键词捕获时（命名分组的正则表达式）
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
reverse（别名，kwargs=｛关键词1：值1，关键词2：值2｝)
例子：
detail_url= reverse("detail", kwargs={"article_id":16})
效果：会反向生成别名为detail的路径，同时把article_id的数据拼到对应的位置



第[13]题_03-django__02-模板
01-过滤器.txt
...
改变日期显示格式的过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
单词：date
例如：
{{ book.bpub_data|date:'Y年-m月-d日' }}



第[14]题_01-数据库__redis
08-zset数据类型.txt
...
获取z1键里权值在1到5范围的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrangebyscore z1 1 5



第[15]题_06-前端__html
02-基本标签.txt
...
加粗标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<b>加粗</b>



第[16]题_02-爬虫__requests爬虫
01-发起请求.txt
...
发起一个get请求
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
# 导入模块
import request
# 发起请求
响应对象 = requests.get(网址)



第[17]题_01-数据库__mysql
03-数据表的操作.txt
...
创建数据表
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
create table 表名（字段 类型 约束）
示例：
》创建一个表，主键primary key， 自增长 auto_increment
create table student(id int primary key auto_increment);
》删掉它
drop table student;
》换个姿式再创建一次，不允许为空 not null
create table student(
id int auto_increment primary key,
name varchar(20) not null
);
》再删掉
drop table student;
》再创建，default 0
create table student(
id int auto_increment primary key,
name varchar(20) not null,
age int not null,
gender bit default 1,
address varchar(20),
isDelete bit default 0
);



第[18]题_06-前端__html
02-基本标签.txt
...
超链接标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
<a href="2.html" target="_blank">测试页面2</a>
说明：
<a>标签可以在网页上定义一个链接地址，它的常用属性有：
href属性 定义跳转的地址
title属性 定义鼠标悬停时弹出的提示文字框
target属性 定义链接窗口打开的位置
target="_self" 缺省值，新页面替换原来的页面，在原来位置打开
target="_blank" 新页面会在新开的一个浏览器窗口打开



第[19]题_01-数据库__redis
04-string数据类型.txt
...
修改classname的值为pythonOne
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> set classname pythonOne



第[20]题_01-数据库__mongodb
03-查询.txt
...
范围运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
在， $in
不在， $nin
例子：查询年龄在 16 19 22 岁的
db.colc.find({age:{$in:[16,19,22]}})



第[21]题_01-数据库__redis
05-键命令.txt
...
查看以na开头的键
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> keys na*



第[22]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
join过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|join:"/" }}
效果：
value容器的成员以：右边的符号进行连接



第[23]题_02-爬虫__解析库
02-python操作xpath.txt
...
利用Element对象的xpath方法取值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
返回值 = Element对象.xpath(字符串xpath选择语句)
注意：
返回值是列表类型
如果返回值是一个节点
那么该节点，仍然可以继续使用xpath方法



第[24]题_06-前端__html
02-基本标签.txt
...
字符实体
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
空格， &nbsp;
<， &lt;
>， &gt;



第[25]题_04-版本控制__02-github
01-操作.txt
...
本地仓库推送到网上
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
git push -u origin
例子：
git push -u origin



第[26]题_02-爬虫__requests爬虫
03-经验小结.txt
...
如何获取下一页的URL地址
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，寻找URL规律，根据规律来拼下一页
二，通过"下一页"链接url来找



第[27]题_05-linux__01-压缩与解压缩.txt
01-操作.txt
...
bzip2压缩
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
bzip2 文件1 文件n
被压缩文件会消失，新生成的压缩文件以.bz2结尾
单个文件被压缩，并不会合并成一个压缩包
不可以压缩目录



第[28]题_01-数据库__mongodb
05-索引.txt
...
创建一个唯一索引
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子
> db.stu.ensureIndex({name:1},{unique:true})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
应用：
可以通过创建一个唯一索引的方式
来约束字段，不允许重复



第[29]题_03-django__04-dj2vdo
191024视图.txt
...
模板的渲染，
把模板文件的内容获取出来
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
方式一：render_to_string
》导入
from django.template.loader import render_to_string
》在视图中使用
def index(request):
	html = render_to_string(模板名.html)
	return HttpResponse(html)
》说明
这个是render函数的基本，了解即可
方式二: render 
》导入
from django.shortcuts import render
》在视图中使用
def index(request):
	return render(request, 模板名.html)



第[30]题_03-django__04-dj2vdo
191024模板.txt
...
for遍历，逆序遍历
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{% for 临时变量 in 容器 reversed %}
临时变量
{% endfor %}



第[31]题_01-数据库__mysql
04-数据行的操作.txt
...
插入数据-缺省插入
只插入部分字段的值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
insert into 表名（字段1，字段n） values(值1，值n);
例子：
insert into student (name) values('ggyy');



第[32]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
first与last过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|first }}
{{ 数据|last }}
效果：
first用于拿到数据中第一个成员
last用于拿到数据中最后一个成员



第[33]题_01-数据库__redis
09-hash数据类型.txt
...
删除哈希数据某一个字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hdel 键 字段
例子：删除zs的weight字段
hdel zs weight



第[34]题_01-数据库__redis
06-list数据类型.txt
...
获取lis键中最后四个元素
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> lrange lis -4 -1



第[35]题_01-数据库__redis
08-zset数据类型.txt
...
删除z1键里的两个成员two,three
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> zrem z1 two three



第[36]题_02-爬虫__解析库
01-xpath解析.txt
...
获取pc标签下notbook标签的所有属性值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
//pc/notbook/@*



第[37]题_03-django__03-配置
01-基本配置.txt
...
模板页中如何使用静态文件
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
一，导入静态配置
{% load staticfiles %}
二，拼静态文件的路径
例如在static目录下有image目录，目录下有a.jpg
这样子拼路径
{% static 'image/a.jpg'}



第[38]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
default过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
用法：
{{ 数据|default:默认值}}
例子：
{{ value|default:"无数据" }}
效果：
如果数据为空时，显示：右边的内容
空列表空字符串空字典等等



第[39]题_03-django__04-dj2vdo
1920211530综合.txt
...
ALLOWED_HOSTS的功能
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
配置中ALLOWED_HOSTS的功能
只有列表中的ip才可以访问



第[40]题_06-前端__html
02-基本标签.txt
...
换行标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
标签：
<br>
或者
<br />



第[41]题_05-linux__01-压缩与解压缩.txt
01-操作.txt
...
gzip压缩
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
gzip 文件1 文件n
原文件会消失，会有新的压缩文件出来，以.gz结尾
单个文件压缩，并不会合并为一个压缩包
不可压缩目录



第[42]题_01-数据库__mongodb
03-查询.txt
...
自定义查询，使用js语句来查
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
find({
	$where:function(){
		return this.age>19
	}
})
例子：
查找班级名称为python02的
db.colc.find({
	$where:function(){
		return this.classname == "python02"
	}
})
查找年龄小于19岁的
db.colc.find({
	$where:function(){
		return this.age < 19 
	}
})
关键点：
查询条件字典中以
$where 为键
值是一个js的匿名函数
只需要函数return 一个布尔值即可
如果布尔的结果为true 那么该行数据会被显示
通常在匿函中的this代表了当前数据行对象



第[43]题_03-django__04-dj2vdo
191024模板.txt
...
高级模板变量取值与方法的调用
模板变量为列表，字典时，如何取成员
模板变量为对象时，如何调方法
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
取值规则：
通过点来取值，例如：
字典.键， 列表.索引， 对象.属性取值
调方法规则：
模板变量.方法名  
注意，方法名后不用加括号
例如：
模板变量 stu_list 是一个列表，取列表的2号位
{{ stu_list.2 }}
例如：
模板变量 user 是一个对象，取它的name属性值
{{ user.name }}



第[44]题_02-爬虫__requests爬虫
04-多线程爬虫.txt
...
从线程队列中取出数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
代码：
队列.get()
说明：
队列如果是空的，会阻塞
补充：
队列.get(block=False)
队列如果空了，就会报一个错误



第[45]题_04-版本控制__01-git
01-入门.txt
...
冲突的发生与解决
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
》发生
两个分支在处理同一个文件
在进行合并分支时，会冲突
》解决
手动编辑冲突文档解决
例如下面是冲突的内容：留下想要的内容， 删掉 >>>   <<< === 等符号
>>>>>head
111
======
2222
<<<<<<分支名



第[46]题_01-数据库__redis
01-安装与配置.txt
...
默认的端口号
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
6379



第[47]题_01-数据库__mongodb
06-mongodb与python的交互.txt
...
创建与数据库的连接
定位到数据库
定位到集合
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
# 导入pymongo的客户端类
from pymongo import MongoClient
# 实例化得到一个对象
client = MongoClient(host="127.0.0.1", port=27017)
# 连接数据库
db = client['one']
print(db)
# 连接到集合
col = db['stu']
print(col)



第[48]题_06-前端__html
05-表格.txt
...
表格的基本格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<table>
    <thead>
    <tr><th>序号</th><th>姓名</th></tr>
    </thead>
    <tbody>
    <tr><td>1</td><td>张三</td></tr>
    </tbody>
</table>
说明：table的属性
border属性 定义表格的边框，设置值是数值
cellpadding属性 定义单元格内容与边框的距离，设置值是数值
cellspacing属性 定义单元格与单元格之间的距离，设置值是数值
align属性 设置整体表格相对于浏览器窗口的水平对齐方式,设置值有：left | center | right
说明：tr代表一行，td和th代表单元格
<tr>标签：定义表格中的一行
<td>和<th>标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格，
<thead>标签，代表表头
<tbody>标签，代表了表格的主体
注意：单元格的属性
align 设置单元格中内容的水平对齐方式,设置值有：left | center | right
valign 设置单元格中内容的垂直对齐方式 top | middle | bottom
colspan 设置单元格水平合并，设置值是数值
rowspan 设置单元格垂直合并，设置值是数值



第[49]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
safe过滤器
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{{ value|safe }}
效果：
value的代码会被浏览器解析
如果是html代码会生成标签
如果是js代码会执行
对于用户提交的数据不要用saft过滤器



第[50]题_01-数据库__redis
09-hash数据类型.txt
...
获取一共有多少个键值对
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
hlen 键
例子：获取zs一共有多少个字段
hlen zs



第[51]题_01-数据库__redis
09-hash数据类型.txt
...
删除整个哈希数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
del 键
例子：删掉键为zs的哈希数据
del zs



第[52]题_01-数据库__mysql
03-数据表的操作.txt
...
查看表结构
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
desc 表名;
desc student;



第[53]题_01-数据库__redis
01-安装与配置.txt
...
如何启动服务端
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
redis-server 配置的地址
[root@192 ~]# redis-server /etc/redis/redis.conf



第[54]题_06-前端__html
01-html基本.txt
...
meta标签
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
定义网页基本信息的标签
例如
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="keywords" content="python 人工智能">
    <meta name="description" content="网站描述">



第[55]题_04-版本控制__01-git
01-入门.txt
...
创建分支同时切换到新分支
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
git checkout -b 分支名称
例子：
$ git checkout -b zhaoyun



第[56]题_01-数据库__mongodb
03-查询.txt
...
逻辑运算符
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
与，｛键1：值1， 键2：值2｝ 
或， ｛$or：[{},{}]｝
例子：
找年龄为19岁或者班级为java班的数据
db.colc.find({$or:[{age:19},{classname:"java"}]})
找年龄大于16岁或者班级为java班的数据
db.colc.find({$or:[{age:{$gt:16}},{classname:"java"}]})



第[57]题_06-前端__html
01-html基本.txt
...
载入其它样式文件
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<link rel="stylesheet" href="m.css">



第[58]题_03-django__04-dj2vdo
191029模板过滤器.txt
...
模板过滤器的使用格式
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
{{ 模块变量 | 过滤器:参数 }}
说明：
关于参数
有的过滤器是不带参数的
如果有参数，最多只会接收一个参数



第[59]题_01-数据库__mysql
03-数据表的操作.txt
...
修改表中字段-删除字段
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
alter table 表名 drop 字段;
例子：
alter table pistudent drop defen;



第[60]题_01-数据库__redis
06-python连redis.txt
...
添加string类型的数据
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
连接对象.set(键，值)



第[61]题_01-数据库__redis
04-string数据类型.txt
...
一次性设置多个键值
name,zs
age,18
gender,ture
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
127.0.0.1:6379> mset name zs age 18 gender true



第[62]题_03-django__04-dj2vdo
1920211530综合.txt
...
视图中获取get方式传递过来的参数
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
在视图中通过
request.GET 获取get传参的字典
通过request.GET[键] 获取字典中键所对应的值



第[63]题_01-数据库__mongodb
01-增删改查.txt
...
查看当前全部的数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
两种查询办法：
> show databases
> show dbs



第[64]题_03-django__04-dj2vdo
191024模板.txt
...
遍历容器无数据时的显示
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
格式：
｛% for 临时变量 in 容器 %}
 	临时变量
｛% empty %}
无数据
｛% endfor %｝



第[65]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
fun(*args,**kwargs)中的*args,**kwargs什么意思？
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
*args和**kwargs主要用于函数定义。你可以将不定数量的参数传递给一个函数。这里的不定的意思是:预先并不知道,函数使用者会传递多少个参数给你所以在这个场景下使用这两个关键字。
*args是 用来发送一个非键值对的可变数量的参 数列表给一个函数
**kwargs允许你将不定长度的键值对，作为参数传递给一个函数。



第[66]题_02-爬虫__requests爬虫
02-响应的属性与方法.txt
...
获取响应头
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
响应对象.headers



第[67]题_06-前端__html
01-html基本.txt
...
注释
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
<!-- 注释内容写在这里 -->



第[68]题_01-数据库__mysql
02-数据库操作.txt
...
查看当前选中的是哪个数据库
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
select database();



第[69]题_03-django__04-dj2vdo
191024模板.txt
...
字典遍历，同时得到键与值
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
例子：
{% for key, val in persion.items %}
key--val
{% endfor %}



第[70]题_08-面试刷题__一只小妖
10221614-面试题上.txt
...
避免转义给字符串加哪个字母表示原始字符串
如何避免正则表达式中的内容被python解释器转义
在python写正则表达式要注意什么
...
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
答案：
注意使用r包裹一下
r , 表示需要原始字符串，不转义特殊字符
例如：
re_path(r"book/(\d+)/", bookview)



